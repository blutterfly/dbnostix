{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>Welcome to DBNOSTIX</p>"},{"location":"algotrade/algotrade.html","title":"Algotrade","text":"<p>A deep dive into algorithmic trading concepts.</p>"},{"location":"algotrade/extract.html","title":"Extract","text":"<p>Techniques and tools for extracting financial data.</p>"},{"location":"algotrade/load.html","title":"Load","text":"<p>Loading financial data into storage systems for further processing.</p>"},{"location":"algotrade/transform.html","title":"Transform","text":"<p>Transforming and cleaning financial data for analysis.</p>"},{"location":"database/database.html","title":"Database","text":"<p>General overview of databases and their importance.</p>"},{"location":"database/db2.html","title":"Db2","text":"<p>Introduction to IBM Db2 and its features.</p>"},{"location":"database/duckdb.html","title":"Duckdb","text":"<p>Introduction to DuckDB, an in-memory analytical database.</p>"},{"location":"database/postgresql.html","title":"Postgresql","text":"<p>A guide to PostgreSQL and its use cases.</p>"},{"location":"dbnostix/about.html","title":"About","text":"<p>Information about the Dbnostix platform, its history, and goals.</p>"},{"location":"dbnostix/company.html","title":"Dbnostix","text":"<p>An overview of Dbnostix, its purpose, and key features.</p>"},{"location":"dbnostix/contact.html","title":"Contact","text":"<p>Contact details and ways to reach out for inquiries and support.</p>"},{"location":"dbnostix/services.html","title":"Services","text":"<p>A summary of services offered by Dbnostix.</p>"},{"location":"mkdocs/admonitions.html","title":"Admonitions","text":"<p>In MkDocs Material, callouts are called Admonitions. You can implement them easily by following these steps:</p>"},{"location":"mkdocs/admonitions.html#topics","title":"Topics","text":""},{"location":"mkdocs/admonitions.html#modify-mkdocsyml","title":"Modify mkdocs.yml","text":"<p>To enable adminitions, ensure that your Material theme supports admonitions by adding these lines to your configuration file:</p> <pre><code>markdown_extensions:\n  - admonition\n  - pymdownx.details\n  - pymdownx.superfences\n</code></pre>"},{"location":"mkdocs/admonitions.html#syntax-for-callouts","title":"Syntax for Callouts","text":"<p>Here's a basic example:</p> <pre><code>!!! note \"Optional title\"\n    This is a simple note callout.\n</code></pre>"},{"location":"mkdocs/admonitions.html#types-of-admonitions","title":"Types of Admonitions","text":"<p>You can use various predefined types:</p> <p>Info</p> <ul> <li>note</li> <li>info</li> <li>tip</li> <li>warning</li> <li>danger</li> <li>success</li> <li>question</li> <li>example</li> <li>quote</li> <li>bug</li> </ul>"},{"location":"mkdocs/admonitions.html#examples","title":"Examples","text":"<pre><code>!!! info \"Important Information\"\n    Please read carefully before proceeding.\n</code></pre> <p>Important Information</p> <p>Please read carefully before proceeding.</p> <pre><code>!!! warning \"Be Careful!\"\n    You might lose your changes if you proceed without saving.\n</code></pre> <p>Be Careful!</p> <p>You might lose your changes if you proceed without saving.</p> <pre><code>??? tip \"Collapsible tip\"\n    This content is hidden until expanded by the user.\n</code></pre> Collapsible tip <p>This content is hidden until expanded by the user.</p>"},{"location":"mkdocs/collapsible_sections.html","title":"Collapsible Sections","text":"<p>How to create collapsible sections in MkDocs.</p>"},{"location":"mkdocs/mkdocs.html","title":"Overview","text":"<p>Getting started with MkDocs for documentation.</p>"},{"location":"obsidian/cards.html","title":"Cards","text":"<p>Implementing card-based layouts in MkDocs.</p>"},{"location":"obsidian/obsidian.html","title":"Obsidian","text":"<p>Overview of Obsidian as a knowledge management tool.</p>"},{"location":"python/00_Contents.html","title":"Contents","text":"<p>Welcome to this comprehensive Python guide, specifically tailored for data scientists, machine learning experts, and predictive modeling specialists. This resource aims to equip you with best practices, detailed examples, and practical use cases to streamline your data science projects and enhance your productivity. Whether you are a seasoned professional or a beginner looking to deepen your expertise, you'll find structured, actionable information to elevate your skills in Python programming, data analysis, and predictive modeling.</p> <p>Chapters</p> <ul> <li>01 Overview</li> <li>02 Setup &amp; Installation</li> <li>03 Core Concepts</li> <li>04 Advanced Concepts</li> <li>05 Syntax and Variables</li> <li>06 Control Flow</li> <li>07 Data Structures</li> <li>08 Functions and Modules</li> <li>09 Object-Oriented Programming</li> <li>10 Python Standard Library</li> <li>11 File Handling and I/O</li> <li>12 Exception Handling and Debugging</li> <li>13 Web Development</li> <li>14 Data Science</li> <li>15 Machine Learning and AI</li> <li>16 Predictive Modeling</li> <li>17 Databases</li> </ul> <p>Future - 15 \ud83c\udfae Game Development (Pygame, Godot) - 16 \ud83d\udd12 Cybersecurity &amp; Ethical Hacking - 17 \ud83e\udd16 Automation &amp; Scripting - 18 \ud83d\udd78\ufe0f Web Scraping (BeautifulSoup, Scrapy) - 19 \ud83c\udfa8 GUI Development (Tkinter, PyQt) - 20 \ud83d\ude80 Performance Optimization &amp; Best Practices - 21 \ud83c\udfed Working with Databases (SQLite, PostgreSQL, MySQL) - 22 \ud83c\udfd7\ufe0f API Development &amp; RESTful Services - 23 \ud83c\udf0d Deployment &amp; Cloud (AWS, Docker, Heroku) - 24 \ud83d\udce6 Virtual Environments &amp; Package Management - 25 \ud83d\udcdd Testing &amp; Debugging (unittest, pytest) - 26 \u23f3 Concurrency &amp; Parallel Processing - 27 \u2699\ufe0f DevOps &amp; CI/CD for Python Projects - 28 \ud83d\udd04 Functional Programming in Python - 29 \ud83e\uddea Scientific Computing (SciPy, SymPy) - 30 \ud83d\udcdc Writing Pythonic Code &amp; Best Practices</p>"},{"location":"python/01_Overview.html","title":"01 \ud83d\udcd8 Overview","text":"<p>Python is a high-level, interpreted programming language known for its simplicity and readability. Created by   Guido van Rossum   and first released in 1991, Python has become one of the most popular languages due to its ease of use, vast ecosystem, and broad applicability.</p> <p>Python supports multiple programming paradigms, including   procedural, object-oriented, and functional programming  , making it a versatile choice for a variety of applications, such as   web development, data science, artificial intelligence, automation, and scientific computing  .</p>"},{"location":"python/01_Overview.html#features-of-python","title":"Features of Python","text":""},{"location":"python/01_Overview.html#1-simple-readable-syntax","title":"1. Simple &amp; Readable Syntax","text":"<ul> <li>Python\u2019s syntax is designed to be   easy to read and write  , reducing the learning curve for beginners.</li> <li>Code readability is emphasized with   indentation-based structuring   (instead of braces <code>{}</code> like in C/C++ or Java).</li> </ul>"},{"location":"python/01_Overview.html#2-interpreted-language","title":"2. Interpreted Language","text":"<ul> <li>Python is an   interpreted language  , meaning code is executed   line by line   without requiring compilation.</li> <li>This makes debugging easier but may affect execution speed compared to compiled languages.</li> </ul>"},{"location":"python/01_Overview.html#3-dynamically-typed","title":"3. Dynamically Typed","text":"<ul> <li>You   don\u2019t need to declare data types   explicitly; Python automatically detects them at runtime.</li> </ul> <pre><code>x = 10  # Integer\ny = \"Hello\"  # String\nz = 3.14  # Float\n</code></pre>"},{"location":"python/01_Overview.html#4-object-oriented-functional-programming","title":"4. Object-Oriented &amp; Functional Programming","text":"<ul> <li>Supports   object-oriented programming (OOP)  , allowing for encapsulation, inheritance, and polymorphism.</li> <li>Also supports   functional programming  , allowing the use of   map, filter, lambda functions, and higher-order functions  .</li> </ul>"},{"location":"python/01_Overview.html#5-cross-platform-compatibility","title":"5. Cross-Platform Compatibility","text":"<ul> <li>Python is   portable   and can run on   Windows, macOS, Linux, and even embedded systems   without modification.</li> </ul>"},{"location":"python/01_Overview.html#6-large-standard-library","title":"6. Large Standard Library","text":"<ul> <li>Python comes with a   rich standard library   that provides modules for file handling, networking, regular expressions, data structures, and more.</li> </ul> <pre><code>import math  # Using the built-in math module\nprint(math.sqrt(16))  # Output: 4.0\n</code></pre>"},{"location":"python/01_Overview.html#7-extensive-third-party-libraries","title":"7. Extensive Third-Party Libraries","text":"<ul> <li>Python has a vast ecosystem of libraries, such as:</li> <li>NumPy, Pandas, Matplotlib   (for Data Science)</li> <li>TensorFlow, PyTorch, Scikit-learn   (for Machine Learning &amp; AI)</li> <li>Flask, Django, FastAPI   (for Web Development)</li> <li>Requests, BeautifulSoup, Scrapy   (for Web Scraping)</li> <li>PyQt, Tkinter   (for GUI Development)</li> </ul>"},{"location":"python/01_Overview.html#8-automatic-memory-management","title":"8. Automatic Memory Management","text":"<ul> <li>Python handles memory allocation and deallocation   automatically   using   Garbage Collection (GC)  .</li> </ul>"},{"location":"python/01_Overview.html#9-multi-purpose-language","title":"9. Multi-Purpose Language","text":"<ul> <li>Used for:</li> <li>Web Development  </li> <li>Data Science &amp; Analytics  </li> <li>Machine Learning &amp; AI  </li> <li>Automation &amp; Scripting  </li> <li>Cybersecurity  </li> <li>Game Development  </li> <li>Embedded Systems (MicroPython, Raspberry Pi)  </li> </ul>"},{"location":"python/01_Overview.html#operating-systems","title":"Operating Systems","text":"<p>Python is a highly portable language that runs on a wide variety of operating systems including:</p> <ul> <li>Windows \u2013 Supports Windows 10, 11, and older versions (7, 8, Server editions).</li> <li>macOS \u2013 Available on Intel and Apple Silicon (M1, M2, M3 chips).</li> <li>Linux \u2013 Supports major distributions:</li> <li>Ubuntu</li> <li>Debian</li> <li>Fedora</li> <li>CentOS</li> <li>Red Hat Enterprise Linux (RHEL)</li> <li>Arch Linux</li> <li>openSUSE</li> <li>Manjaro, etc.</li> <li>Unix-based OS:</li> <li>FreeBSD</li> <li>OpenBSD</li> <li>NetBSD</li> <li>Solaris</li> <li>AIX (IBM Unix)</li> <li>Android \u2013 Python can run via Termux or custom builds.</li> <li>iOS/iPadOS \u2013 Python can be used via apps like Pythonista or Pyto.</li> </ul>"},{"location":"python/01_Overview.html#platforms","title":"Platforms","text":"<p>Platforms include:</p> <ul> <li>x86 (32-bit and 64-bit) \u2013 Common on Windows, Linux, and older macOS systems.</li> <li>ARM (32-bit and 64-bit) \u2013 Used in Raspberry Pi, Android devices, and Apple Silicon (via native builds).</li> <li>RISC-V \u2013 Growing support for open-source hardware.</li> <li>Web (Browser-based execution via Pyodide or Brython).</li> <li>Embedded Systems (Microcontrollers like Raspberry Pi Pico, ESP32 using MicroPython or CircuitPython).</li> <li>Mainframes (IBM z/OS supports Python for enterprise applications).</li> <li>Cloud Platforms \u2013 Runs on AWS, Azure, Google Cloud, and other cloud environments.</li> <li>Docker &amp; Containers \u2013 Python is widely used in containerized environments.</li> <li>Virtual Machines \u2013 Can run inside VMs like VirtualBox, VMware, and Hyper-V.</li> </ul> <p>Python\u2019s versatility ensures it can run on almost any modern computing environment.</p>"},{"location":"python/01_Overview.html#conclusion","title":"Conclusion","text":"<p>Python is a powerful, easy-to-learn language with a vast ecosystem, making it suitable for beginners and professionals alike. Its   simplicity, flexibility, and extensive libraries   make it a top choice for   AI, web development, data science, and automation  . \ud83d\ude80</p>"},{"location":"python/02_Setup_Installation.html","title":"02 \ud83d\udee0\ufe0f Setup and Installation","text":""},{"location":"python/02_Setup_Installation.html#environment-setup","title":"Environment Setup","text":""},{"location":"python/02_Setup_Installation.html#python-installation","title":"Python Installation","text":"<p>Setting up Python correctly is essential. We recommend downloading the latest stable Python version from the official Python website. Ensure you select the appropriate version compatible with your operating system (Windows, macOS, Linux). Follow the installer instructions, selecting the option to add Python to your PATH environment variable.</p> <p>Verify your installation by running:</p> <pre><code>python --version\n</code></pre>"},{"location":"python/02_Setup_Installation.html#virtual-environment","title":"Virtual Environment","text":"<p>Using virtual environments helps isolate your project dependencies and avoids conflicts.</p>"},{"location":"python/02_Setup_Installation.html#pip","title":"pip","text":"<p><code>pip</code> is Python's package installer, allowing easy management of packages. It comes bundled with Python 3 by default. Verify pip installation by running:</p> <pre><code>pip --version\n</code></pre>"},{"location":"python/02_Setup_Installation.html#virtual-environment-venv","title":"Virtual Environment (venv)","text":"<p>Virtual environments isolate project dependencies. Set up a virtual environment with Python's built-in <code>venv</code>:</p>"},{"location":"python/02_Setup_Installation.html#creating-and-activating-a-virtual-environment","title":"Creating and Activating a Virtual Environment","text":"<pre><code>python -m venv myenv\n\n# Activate the environment\n# On Windows:\nmyenv\\Scripts\\activate\n\n# On macOS/Linux\nsource myenv/bin/activate\n</code></pre> <p>VSCode</p> <p>In VSCode the default library when Creating Environment is .venv instead of venv</p>"},{"location":"python/02_Setup_Installation.html#installing-packages","title":"Installing Packages","text":"<p>Once activated, install packages using:</p> <pre><code>pip install numpy pandas matplotlib\n</code></pre>"},{"location":"python/02_Setup_Installation.html#integrated-development-environment","title":"Integrated Development Environment","text":"<p>Choosing the right Integrated Development Environment (IDE) is crucial for efficiency.</p>"},{"location":"python/02_Setup_Installation.html#idle","title":"IDLE","text":"<p>IDLE comes bundled with Python and is suitable for basic scripting and quick experiments.</p> <ul> <li>Launch IDLE from your Python installation.</li> <li>Provides a straightforward interactive shell and simple editor.</li> <li>Ideal for beginners or small tasks.</li> </ul>"},{"location":"python/02_Setup_Installation.html#vscode","title":"VSCode","text":"<ul> <li>Highly recommended for professional development.</li> <li>Feature-rich editor with extensive Python support through extensions.</li> <li>Easy integration with Jupyter Notebooks, Git, and debugging tools.</li> <li>Installation: VSCode.</li> </ul>"},{"location":"python/02_Setup_Installation.html#pycharm","title":"PyCharm","text":"<p>A powerful, dedicated Python IDE ideal for larger, complex projects.</p> <ul> <li>Excellent code completion, debugging, and version control integration.</li> <li>Offers Community (free) and Professional (paid) editions.</li> </ul>"},{"location":"python/02_Setup_Installation.html#jupyterlab","title":"JupyterLab","text":"<p>Web-based IDE highly popular among data scientists.</p> <ul> <li>Combines notebooks, terminal, text editors, and visualization in one interface.</li> <li>Perfect for interactive data exploration, visualization, and documentation.</li> <li>Install via pip:</li> </ul> <pre><code>pip install jupyterlab\n</code></pre> <p>Launch by running:</p> <pre><code>jupyter lab\n</code></pre> <p>This setup ensures a solid foundation to maximize productivity in your Python-based projects.</p> <p>Bug</p> <p>Add topic Python CLI</p>"},{"location":"python/03_Core_Concepts.html","title":"03 \u2699\ufe0f Core Concepts","text":""},{"location":"python/03_Core_Concepts.html#basic","title":"Basic","text":""},{"location":"python/03_Core_Concepts.html#1-variables-data-types","title":"1. Variables &amp; Data Types","text":"<p>Python supports multiple data types:</p> <pre><code>x = 10         # Integer\ny = 3.14       # Float\nz = \"Python\"   # String\na = True       # Boolean\nb = [1, 2, 3]  # List\nc = (4, 5, 6)  # Tuple\nd = {\"key\": \"value\"}  # Dictionary\n</code></pre>"},{"location":"python/03_Core_Concepts.html#2-conditional-statements","title":"2. Conditional Statements","text":"<pre><code>x = 10\nif x &gt; 5:\n    print(\"x is greater than 5\")\nelif x == 5:\n    print(\"x is 5\")\nelse:\n    print(\"x is less than 5\")\n</code></pre>"},{"location":"python/03_Core_Concepts.html#3-loops-for-while","title":"3. Loops (For &amp; While)","text":"<pre><code># For loop\nfor i in range(5):\n    print(i)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1\n</code></pre>"},{"location":"python/03_Core_Concepts.html#4-functions","title":"4. Functions","text":"<pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"Ted\"))  # Output: Hello, Ted!\n</code></pre>"},{"location":"python/03_Core_Concepts.html#5-object-oriented-programming-oop","title":"5. Object-Oriented Programming (OOP)","text":"<pre><code>class Car:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model\n\n    def display(self):\n        return f\"Car: {self.brand} {self.model}\"\n\ncar1 = Car(\"Toyota\", \"Corolla\")\nprint(car1.display())  # Output: Car: Toyota Corolla\n</code></pre>"},{"location":"python/03_Core_Concepts.html#6-exception-handling","title":"6. Exception Handling","text":"<pre><code>try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\nfinally:\n    print(\"Execution completed.\")\n</code></pre>"},{"location":"python/03_Core_Concepts.html#7-file-handling","title":"7. File Handling","text":"<pre><code>with open(\"example.txt\", \"w\") as file:\n    file.write(\"Hello, Python!\")\n\nwith open(\"example.txt\", \"r\") as file:\n    content = file.read()\n    print(content)\n</code></pre>"},{"location":"python/03_Core_Concepts.html#8-modules-libraries","title":"8. Modules &amp; Libraries","text":"<pre><code>import math\nprint(math.factorial(5))  # Output: 120\n</code></pre> <p>Mastering these core Python concepts enables Data Scientists, Machine Learning Engineers, and AI developers to build efficient, scalable, and high-performance solutions. \ud83d\ude80</p> <p>Later,  code challenges or exercises to reinforce these topics will be covered. \ud83e\udd14</p>"},{"location":"python/04_Advanced_Concepts.html","title":"04 \u26a1 Advanced Concepts","text":"<p>Python's versatility makes it the go-to language for Data Science, Machine Learning, and AI. Mastering core concepts such as Object-Oriented Programming (OOP), Decorators, Generators, Iterators, Comprehensions, Multithreading, and Asynchronous Programming is crucial for writing efficient, scalable, and maintainable code.</p> <p>This chapter covers essential Python concepts that empower professionals in AI and data science to build optimized pipelines, parallel computations, and reusable components.</p>"},{"location":"python/04_Advanced_Concepts.html#object-oriented-programming-oop","title":"\ud83c\udfd7\ufe0f Object-Oriented Programming (OOP)","text":"<p>Object-Oriented Programming (OOP) is a programming paradigm that enables modularity, code reusability, and encapsulation. It is widely used in Machine Learning for building models, creating reusable components, and managing data pipelines.</p>"},{"location":"python/04_Advanced_Concepts.html#key-oop-concepts","title":"\ud83d\udd39 Key OOP Concepts","text":"<ul> <li>Class &amp; Object \u2013 A class is a blueprint, and an object is an instance of a class.</li> <li>Encapsulation \u2013 Restrict direct access to variables and protect data integrity.</li> <li>Inheritance \u2013 Reuse attributes and methods from a parent class.</li> <li>Polymorphism \u2013 Different classes can implement the same method.</li> </ul>"},{"location":"python/04_Advanced_Concepts.html#example-oop-in-machine-learning","title":"\ud83d\udd39 Example: OOP in Machine Learning","text":"<pre><code>class Model:\n    def __init__(self, name):\n        self.name = name\n\n    def train(self):\n        print(f\"{self.name} model is training...\")\n\nclass NeuralNetwork(Model):\n    def train(self):\n        print(f\"Training deep learning model: {self.name}\")\n\n# Usage\nmodel1 = Model(\"Linear Regression\")\nmodel2 = NeuralNetwork(\"CNN\")\n\nmodel1.train()  # Output: Linear Regression model is training...\nmodel2.train()  # Output: Training deep learning model: CNN\n</code></pre> <p>\u2705 Use Case: OOP allows structured design in ML model pipelines, hyperparameter tuning, and deployment frameworks.</p>"},{"location":"python/04_Advanced_Concepts.html#decorators-generators","title":"\ud83c\udfad Decorators &amp; Generators","text":"<p>Python decorators and generators help optimize code efficiency, making them essential in data pipelines and AI model training.</p>"},{"location":"python/04_Advanced_Concepts.html#decorators-function-wrappers","title":"\ud83d\udd39 Decorators (Function Wrappers)","text":"<p>Decorators modify the behavior of functions without changing their code.</p> <p>Example: Timing an ML Function</p> <pre><code>import time\n\ndef timer(func):\n    def wrapper(*args, kwargs):\n        start = time.time()\n        result = func(*args, kwargs)\n        end = time.time()\n        print(f\"{func.__name__} took {end - start:.4f} seconds\")\n        return result\n    return wrapper\n\n@timer\ndef train_model():\n    time.sleep(2)  # Simulating model training time\n    print(\"Model training complete!\")\n\ntrain_model()\n</code></pre> <p>\u2705 Use Case: Logging, debugging, measuring execution time, monitoring ML pipelines.</p>"},{"location":"python/04_Advanced_Concepts.html#generators-memory-efficient-iteration","title":"\ud83d\udd39 Generators (Memory-Efficient Iteration)","text":"<p>Generators are functions that return iterators lazily, saving memory when handling large datasets.</p> <p>Example: Processing Large Data Efficiently</p> <pre><code>def read_large_file(file_path):\n    with open(file_path, \"r\") as file:\n        for line in file:\n            yield line  # Yields one line at a time\n\n# Usage\nfor line in read_large_file(\"data.csv\"):\n    process(line)  # Process each line lazily\n</code></pre> <p>\u2705 Use Case: Streaming large datasets, real-time data processing in AI applications.</p>"},{"location":"python/04_Advanced_Concepts.html#iterators-comprehensions","title":"\ud83d\udd17 Iterators &amp; Comprehensions","text":"<p>Efficient data handling is critical in Machine Learning when working with large datasets and feature engineering.</p>"},{"location":"python/04_Advanced_Concepts.html#iterators","title":"\ud83d\udd39 Iterators","text":"<p>An iterator is an object that allows traversal of elements one at a time.</p> <p>Example: Custom Data Iterator</p> <pre><code>class DataLoader:\n    def __init__(self, data):\n        self.data = data\n        self.index = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.index &gt;= len(self.data):\n            raise StopIteration\n        result = self.data[self.index]\n        self.index += 1\n        return result\n\n# Usage\ndata = DataLoader([\"image1\", \"image2\", \"image3\"])\nfor d in data:\n    print(d)\n</code></pre> <p>\u2705 Use Case: Data loaders, streaming large datasets for ML models.</p>"},{"location":"python/04_Advanced_Concepts.html#list-dict-and-set-comprehensions","title":"\ud83d\udd39 List, Dict, and Set Comprehensions","text":"<p>Comprehensions make data transformation concise and are widely used in feature engineering and preprocessing.</p> <pre><code># Convert temperature from Celsius to Fahrenheit using list comprehension\ncelsius = [0, 10, 20, 30]\nfahrenheit = [((temp * 9/5) + 32) for temp in celsius]\nprint(fahrenheit)  # Output: [32.0, 50.0, 68.0, 86.0]\n</code></pre> <p>\u2705 Use Case: Feature scaling, data transformation, filtering large datasets.</p>"},{"location":"python/04_Advanced_Concepts.html#multithreading-multiprocessing","title":"\ud83d\udd04 Multithreading &amp; Multiprocessing","text":"<p>Parallel execution is essential for speeding up computations in AI and ML.</p>"},{"location":"python/04_Advanced_Concepts.html#multithreading-efficient-for-io-bound-tasks","title":"\ud83d\udd39 Multithreading (Efficient for I/O-bound tasks)","text":"<p>Example: Fetching multiple datasets in parallel</p> <pre><code>import threading\n\ndef fetch_data(source):\n    print(f\"Fetching from {source}\")\n\nsources = [\"dataset1.csv\", \"dataset2.csv\", \"dataset3.csv\"]\nthreads = [threading.Thread(target=fetch_data, args=(src,)) for src in sources]\n\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()\n</code></pre> <p>\u2705 Use Case: Downloading datasets, web scraping, handling I/O-heavy tasks.</p>"},{"location":"python/04_Advanced_Concepts.html#multiprocessing-efficient-for-cpu-bound-tasks","title":"\ud83d\udd39 Multiprocessing (Efficient for CPU-bound tasks)","text":"<p>Multiprocessing utilizes multiple CPU cores, making it ideal for heavy computations.</p> <p>Example: Parallel Model Training</p> <pre><code>from multiprocessing import Pool\n\ndef train_model(model_id):\n    return f\"Training model {model_id}\"\n\nmodels = [1, 2, 3, 4]\nwith Pool(4) as p:\n    results = p.map(train_model, models)\nprint(results)\n</code></pre> <p>\u2705 Use Case: Parallel model training, large dataset processing, hyperparameter tuning.</p>"},{"location":"python/04_Advanced_Concepts.html#async-await","title":"\ud83e\uddf5 Async &amp; Await","text":"<p>Asynchronous programming is critical for handling large-scale web-based AI applications, real-time data processing, and API calls.</p>"},{"location":"python/04_Advanced_Concepts.html#async-for-efficient-io-operations","title":"\ud83d\udd39 Async for Efficient I/O Operations","text":"<pre><code>import asyncio\n\nasync def fetch_data():\n    print(\"Fetching data...\")\n    await asyncio.sleep(2)  # Simulating delay\n    print(\"Data fetched!\")\n\nasync def main():\n    await asyncio.gather(fetch_data(), fetch_data(), fetch_data())\n\nasyncio.run(main())\n</code></pre> <p>\u2705 Use Case: Handling multiple API requests, web scraping for AI datasets, real-time ML monitoring.</p>"},{"location":"python/04_Advanced_Concepts.html#summary","title":"\ud83d\ude80 Summary","text":"Concept Use Case \ud83c\udfd7\ufe0f OOP ML model architecture, data pipeline design \ud83c\udfad Decorators Logging, debugging, function optimization \ud83c\udfad Generators Handling large datasets efficiently \ud83d\udd17 Iterators Streaming datasets, loading ML batches \ud83d\udd17 Comprehensions Feature engineering, data transformation \ud83d\udd04 Multithreading I/O-bound tasks (API calls, web scraping) \ud83d\udd04 Multiprocessing CPU-bound tasks (ML training, parallel computations) \ud83e\uddf5 Async/Await Real-time AI applications, non-blocking API calls"},{"location":"python/04_Advanced_Concepts.html#final-thoughts","title":"\ud83d\udd1a Final Thoughts","text":"<p>Mastering these core Python concepts enables Data Scientists, Machine Learning Engineers, and AI developers to build efficient, scalable, and high-performance solutions. \ud83d\ude80</p> <p>Would you like to add code challenges or exercises to reinforce these topics? \ud83e\udd14</p>"},{"location":"python/05_Syntax_and_Variables.html","title":"05 \ud83d\udcdd Syntax and Variables","text":"<p>Python's simple and readable syntax makes it a favorite among beginners and experts alike. Understanding its basic syntax and variable handling is essential for writing clean and efficient code.</p>"},{"location":"python/05_Syntax_and_Variables.html#31-python-syntax-basics","title":"\ud83d\udd39 3.1 Python Syntax Basics","text":"<p>Python follows an indentation-based syntax rather than using <code>{}</code> like C or Java. This makes the code cleaner and more readable.</p>"},{"location":"python/05_Syntax_and_Variables.html#example-python-syntax","title":"\u2705 Example: Python Syntax","text":"<pre><code># Correct indentation\nif True:\n    print(\"Hello, Python!\")  # Indented block\n</code></pre> <pre><code># \u274c Incorrect indentation (will raise an error)\nif True:\nprint(\"Hello, Python!\")  # IndentationError\n</code></pre>"},{"location":"python/05_Syntax_and_Variables.html#key-features-of-python-syntax","title":"\ud83d\udee0 Key Features of Python Syntax","text":"<ul> <li>No curly braces <code>{}</code> for blocks\u2014indentation matters!</li> <li>No need for semicolons <code>;</code> at the end of statements.</li> <li>Uses <code>#</code> for single-line comments and <code>\"\"\" \"\"\"</code> for multi-line comments.</li> </ul>"},{"location":"python/05_Syntax_and_Variables.html#32-variables-in-python","title":"\ud83d\udd39 3.2 Variables in Python","text":"<p>Variables in Python store data and do not require explicit type declaration. Python is dynamically typed, meaning the data type is determined at runtime.</p>"},{"location":"python/05_Syntax_and_Variables.html#declaring-variables","title":"\u2705 Declaring Variables","text":"<pre><code>name = \"Alice\"       # String\nage = 25            # Integer\nheight = 5.9        # Float\nis_student = True   # Boolean\n</code></pre>"},{"location":"python/05_Syntax_and_Variables.html#rules-for-variable-naming","title":"\ud83d\udd39 Rules for Variable Naming","text":"<p>\u2705 Allowed:</p> <ul> <li>Can start with a letter or underscore <code>_</code></li> <li>Can contain letters, numbers, and underscores</li> <li>Case-sensitive (<code>Age</code> and <code>age</code> are different)</li> </ul> <p>\u274c Not Allowed:</p> <ul> <li>Cannot start with a number (<code>2name \u274c</code>)</li> <li>Cannot use special characters (<code>@name \u274c</code>)</li> </ul>"},{"location":"python/05_Syntax_and_Variables.html#multiple-variable-assignment","title":"\ud83d\udd39 Multiple Variable Assignment","text":"<pre><code>a, b, c = 1, 2, \"Python\"\nprint(a, b, c)  # Output: 1 2 Python\n</code></pre> <p>\u2705 Use Case: Quick assignment of multiple values.</p>"},{"location":"python/05_Syntax_and_Variables.html#33-data-types-in-python","title":"\ud83d\udd39 3.3 Data Types in Python","text":"<p>Python provides built-in data types for handling different kinds of values.</p> Type Example Description <code>int</code> <code>x = 10</code> Whole numbers <code>float</code> <code>y = 3.14</code> Decimal numbers <code>str</code> <code>s = \"Python\"</code> Text/String <code>bool</code> <code>b = True</code> Boolean (True/False) <code>list</code> <code>l = [1,2,3]</code> Ordered, mutable collection <code>tuple</code> <code>t = (1,2,3)</code> Ordered, immutable collection <code>dict</code> <code>d = {\"key\": \"value\"}</code> Key-value pairs <code>set</code> <code>s = {1,2,3}</code> Unordered unique elements <p>\u2705 Use Case: Storing structured data, lists, and key-value mappings.</p>"},{"location":"python/05_Syntax_and_Variables.html#34-type-conversion","title":"\ud83d\udd39 3.4 Type Conversion","text":"<p>Python allows explicit type conversion (casting) when needed.</p> <pre><code>x = 5          # Integer\ny = str(x)     # Convert to string\nz = float(x)   # Convert to float\nprint(y, z)    # Output: '5' 5.0\n</code></pre> <p>\u2705 Use Case: Ensuring correct data formats in ML/DL models and databases.</p>"},{"location":"python/05_Syntax_and_Variables.html#35-string-manipulation","title":"\ud83d\udd39 3.5 String Manipulation","text":"<p>Python strings (<code>str</code>) support multiple operations.</p> <pre><code>name = \"Python\"\nprint(name.upper())   # PYTHON\nprint(name.lower())   # python\nprint(name[0:3])      # Pyt (Slicing)\n</code></pre> <p>\u2705 Use Case: Data cleaning in text processing and NLP.</p>"},{"location":"python/05_Syntax_and_Variables.html#36-user-input","title":"\ud83d\udd39 3.6 User Input","text":"<p>Python allows reading user input using <code>input()</code>.</p> <pre><code>name = input(\"Enter your name: \")\nprint(\"Hello, \" + name + \"!\")\n</code></pre> <p>\u2705 Use Case: Interactive Python applications and CLI tools.</p>"},{"location":"python/05_Syntax_and_Variables.html#37-constants-in-python","title":"\ud83d\udd39 3.7 Constants in Python","text":"<p>Python doesn\u2019t have built-in constants, but by convention, uppercase names are used.</p> <pre><code>PI = 3.1416  # Treated as a constant\n</code></pre> <p>\u2705 Use Case: Defining scientific constants.</p>"},{"location":"python/05_Syntax_and_Variables.html#38-f-strings-for-string-formatting","title":"\ud83d\udd39 3.8 f-Strings for String Formatting","text":"<pre><code>name = \"Alice\"\nage = 25\nprint(f\"My name is {name} and I am {age} years old.\")\n</code></pre> <p>\u2705 Use Case: Readable string interpolation.</p>"},{"location":"python/05_Syntax_and_Variables.html#summary","title":"\ud83d\ude80 Summary","text":"Concept Key Takeaway Python Syntax Uses indentation instead of <code>{}</code> Variables Dynamically typed, no explicit declaration needed Data Types Includes <code>int</code>, <code>float</code>, <code>str</code>, <code>bool</code>, <code>list</code>, <code>dict</code>, etc. Type Conversion Use <code>str()</code>, <code>int()</code>, <code>float()</code> for casting String Manipulation Supports <code>.upper()</code>, <code>.lower()</code>, slicing, and f-strings User Input <code>input()</code> for user interaction Constants Uppercase variable names conventionally used"},{"location":"python/05_Syntax_and_Variables.html#final-thoughts","title":"\ud83d\udd1a Final Thoughts","text":"<p>Understanding basic syntax and variables is the foundation for mastering Python. Once comfortable with these, you can move on to data structures, control flow, and advanced programming concepts.</p> <p>Would you like exercises or quizzes to reinforce learning? \ud83d\ude80</p>"},{"location":"python/06_Control_Flow.html","title":"06 \ud83d\udd04 Control Flow","text":"<p>Control flow determines the execution order of statements in a Python program. It includes conditional statements, loops, and exception handling, allowing programs to make decisions and repeat actions efficiently.</p>"},{"location":"python/06_Control_Flow.html#41-conditional-statements-if-elif-else","title":"\ud83d\udd39 4.1 Conditional Statements (if, elif, else)","text":"<p>Conditional statements allow Python to execute different blocks of code based on conditions.</p>"},{"location":"python/06_Control_Flow.html#basic-if-else-statement","title":"\u2705 Basic if-else Statement","text":"<pre><code>x = 10\n\nif x &gt; 0:\n    print(\"Positive number\")\nelif x &lt; 0:\n    print(\"Negative number\")\nelse:\n    print(\"Zero\")\n</code></pre> <p>Output: <code>Positive number</code></p>"},{"location":"python/06_Control_Flow.html#nested-if-statements","title":"\ud83d\udd39 Nested if Statements","text":"<pre><code>age = 20\n\nif age &gt; 18:\n    if age &gt;= 21:\n        print(\"Eligible for full privileges\")\n    else:\n        print(\"Limited privileges\")\nelse:\n    print(\"Not eligible\")\n</code></pre> <p>\u2705 Use Case: Decision trees in ML models, data validation, user authentication.</p>"},{"location":"python/06_Control_Flow.html#42-looping-in-python","title":"\ud83d\udd39 4.2 Looping in Python","text":"<p>Loops allow repeating actions based on conditions.</p>"},{"location":"python/06_Control_Flow.html#for-loop-iterating-over-sequences","title":"\ud83d\udd39 for Loop (Iterating over Sequences)","text":"<pre><code>numbers = [1, 2, 3, 4, 5]\n\nfor num in numbers:\n    print(num)\n</code></pre> <p>Output:</p> <pre><code>1\n2\n3\n4\n5\n</code></pre> <p>\u2705 Use Case: Iterating over lists, tuples, dictionaries, and strings in data processing, ML datasets.</p>"},{"location":"python/06_Control_Flow.html#for-loop-with-range","title":"\ud83d\udd39 for Loop with range()","text":"<pre><code>for i in range(1, 6):\n    print(i)\n</code></pre> <p>Output:  </p> <pre><code>1\n2\n3\n4\n5\n</code></pre> <p>\u2705 Use Case: Creating training epochs in machine learning models.</p>"},{"location":"python/06_Control_Flow.html#while-loop-repeat-until-condition-fails","title":"\ud83d\udd39 while Loop (Repeat Until Condition Fails)","text":"<pre><code>count = 0\n\nwhile count &lt; 5:\n    print(\"Count:\", count)\n    count += 1\n</code></pre> <p>Output:  </p> <pre><code>Count: 0\nCount: 1\nCount: 2\nCount: 3\nCount: 4\n</code></pre> <p>\u2705 Use Case: Keeping a server running, waiting for a user input, or training an ML model until convergence.</p>"},{"location":"python/06_Control_Flow.html#43-loop-control-statements","title":"\ud83d\udd39 4.3 Loop Control Statements","text":"<p>Python provides ways to modify loop behavior using <code>break</code>, <code>continue</code>, and <code>pass</code>.</p>"},{"location":"python/06_Control_Flow.html#break-exit-loop-early","title":"\ud83d\udd39 break (Exit Loop Early)","text":"<pre><code>for num in range(10):\n    if num == 5:\n        break  # Stops at 5\n    print(num)\n</code></pre> <p>Output:  </p> <pre><code>0\n1\n2\n3\n4\n</code></pre> <p>\u2705 Use Case: Stopping an AI model early if a condition is met.</p>"},{"location":"python/06_Control_Flow.html#continue-skip-iteration","title":"\ud83d\udd39 continue (Skip Iteration)","text":"<pre><code>for num in range(5):\n    if num == 2:\n        continue  # Skips 2\n    print(num)\n</code></pre> <p>Output:  </p> <pre><code>0\n1\n3\n4\n</code></pre> <p>\u2705 Use Case: Skipping invalid data points in datasets.</p>"},{"location":"python/06_Control_Flow.html#pass-do-nothing","title":"\ud83d\udd39 pass (Do Nothing)","text":"<pre><code>for i in range(5):\n    if i == 3:\n        pass  # Placeholder\n    print(i)\n</code></pre> <p>\u2705 Use Case: Placeholder for functions, classes, loops.</p>"},{"location":"python/06_Control_Flow.html#44-list-comprehensions-for-loops","title":"\ud83d\udd39 4.4 List Comprehensions for Loops","text":"<p>Python supports one-liner loops with list comprehensions, improving efficiency.</p> <pre><code>numbers = [x * 2 for x in range(5)]\nprint(numbers)\n</code></pre> <p>Output: <code>[0, 2, 4, 6, 8]</code></p> <p>\u2705 Use Case: Feature engineering, transforming datasets, list filtering.</p>"},{"location":"python/06_Control_Flow.html#45-exception-handling-try-except-finally","title":"\ud83d\udd39 4.5 Exception Handling (try-except-finally)","text":"<p>Handling exceptions prevents crashes in programs.</p> <pre><code>try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\nfinally:\n    print(\"Execution complete.\")\n</code></pre> <p>Output:  </p> <pre><code>Cannot divide by zero!\nExecution complete.\n</code></pre> <p>\u2705 Use Case: Preventing failures in data pipelines, ML model training.</p>"},{"location":"python/06_Control_Flow.html#summary","title":"\ud83d\ude80 Summary","text":"Concept Key Takeaway if-elif-else Executes different blocks based on conditions for loop Iterates over sequences (lists, tuples, etc.) while loop Runs while condition is <code>True</code> break Exits loop early continue Skips current iteration pass Placeholder statement List Comprehensions Shorter syntax for loops Exception Handling Prevents program crashes"},{"location":"python/06_Control_Flow.html#final-thoughts","title":"\ud83d\udd1a Final Thoughts","text":"<p>Control flow is crucial for decision-making and iteration in Python. Mastering it allows writing efficient, error-free code.</p> <p>Would you like exercises or real-world examples to reinforce these topics? \ud83d\ude80</p>"},{"location":"python/07_Data_Structures.html","title":"07 \ud83c\udf92 Data Structures","text":"<p>Data structures are essential for organizing, storing, and managing data efficiently in Python. Python provides built-in data structures such as Lists, Tuples, Dictionaries, and Sets, each suited for different tasks.  </p> <p>This chapter covers their properties, operations, and use cases in Data Science, Machine Learning, and AI applications.</p>"},{"location":"python/07_Data_Structures.html#071-lists-ordered-mutable-indexed","title":"07.1 \ud83d\udccb Lists (Ordered, Mutable, Indexed)","text":"<p>A list is an ordered, mutable (changeable) collection that allows duplicate values. Lists are widely used for storing and manipulating datasets.</p>"},{"location":"python/07_Data_Structures.html#creating-a-list","title":"\u2705 Creating a List","text":"<pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nnumbers = [10, 20, 30, 40]\nmixed = [1, \"Python\", 3.14, True]\n</code></pre>"},{"location":"python/07_Data_Structures.html#list-operations","title":"\ud83d\udd39 List Operations","text":"<pre><code>fruits.append(\"mango\")  # Add element\nfruits.remove(\"banana\") # Remove element\nfruits.insert(1, \"grape\")  # Insert at index\nfruits.pop()  # Remove last item\nprint(fruits)\n</code></pre> <p>\u2705 Use Case: Managing data records, feature lists, training data batches in ML.</p>"},{"location":"python/07_Data_Structures.html#list-slicing","title":"\ud83d\udd39 List Slicing","text":"<pre><code>numbers = [1, 2, 3, 4, 5, 6]\nprint(numbers[1:4])  # Output: [2, 3, 4]\n</code></pre> <p>\u2705 Use Case: Extracting subsets of data in AI and ML models.</p>"},{"location":"python/07_Data_Structures.html#072-tuples-ordered-immutable-indexed","title":"07.2 \ud83d\udccc Tuples (Ordered, Immutable, Indexed)","text":"<p>A tuple is like a list but immutable (cannot be modified). Tuples are used where data should not change.</p>"},{"location":"python/07_Data_Structures.html#creating-a-tuple","title":"\u2705 Creating a Tuple","text":"<pre><code>coordinates = (10.5, 20.3)\ncolors = (\"red\", \"green\", \"blue\")\n</code></pre>"},{"location":"python/07_Data_Structures.html#tuple-operations","title":"\ud83d\udd39 Tuple Operations","text":"<pre><code>print(coordinates[0])  # Access elements\nprint(len(colors))     # Tuple length\n</code></pre> <p>\u2705 Use Case: Storing constant data like color codes, geographic coordinates.</p>"},{"location":"python/07_Data_Structures.html#tuple-packing-unpacking","title":"\ud83d\udd39 Tuple Packing &amp; Unpacking","text":"<pre><code>point = (3, 4)\nx, y = point  # Unpacking\nprint(x, y)   # Output: 3 4\n</code></pre> <p>\u2705 Use Case: Assigning multiple values in one step in AI and data transformations.</p>"},{"location":"python/07_Data_Structures.html#073-dictionaries-key-value-pairs-unordered-mutable","title":"07.3 \ud83d\uddc2\ufe0f Dictionaries (Key-Value Pairs, Unordered, Mutable)","text":"<p>A dictionary (<code>dict</code>) stores data in key-value pairs, making it ideal for fast lookups.</p>"},{"location":"python/07_Data_Structures.html#creating-a-dictionary","title":"\u2705 Creating a Dictionary","text":"<pre><code>student = {\"name\": \"Alice\", \"age\": 21, \"grade\": \"A\"}\n</code></pre>"},{"location":"python/07_Data_Structures.html#dictionary-operations","title":"\ud83d\udd39 Dictionary Operations","text":"<pre><code>print(student[\"name\"])   # Access value\nstudent[\"age\"] = 22      # Modify value\nstudent[\"city\"] = \"NY\"   # Add new key-value pair\ndel student[\"grade\"]     # Remove key-value pair\n</code></pre> <p>\u2705 Use Case: Storing JSON-like data, AI model parameters, ML hyperparameters.</p>"},{"location":"python/07_Data_Structures.html#iterating-over-a-dictionary","title":"\ud83d\udd39 Iterating Over a Dictionary","text":"<pre><code>for key, value in student.items():\n    print(f\"{key}: {value}\")\n</code></pre> <p>\u2705 Use Case: Extracting metadata from datasets, handling API responses.</p>"},{"location":"python/07_Data_Structures.html#074-sets-unordered-unique-elements-fast-lookups","title":"07.4 \ud83d\udd25 Sets (Unordered, Unique Elements, Fast Lookups)","text":"<p>A set is an unordered collection of unique elements, useful for removing duplicates and fast lookups.</p>"},{"location":"python/07_Data_Structures.html#creating-a-set","title":"\u2705 Creating a Set","text":"<pre><code>numbers = {1, 2, 3, 4, 4, 2}  # Duplicates removed automatically\n</code></pre>"},{"location":"python/07_Data_Structures.html#set-operations","title":"\ud83d\udd39 Set Operations","text":"<pre><code>numbers.add(5)  # Add element\nnumbers.remove(3)  # Remove element\n</code></pre>"},{"location":"python/07_Data_Structures.html#set-operations-for-ai-ml","title":"\ud83d\udd39 Set Operations for AI &amp; ML","text":"<pre><code>A = {1, 2, 3, 4}\nB = {3, 4, 5, 6}\n\nprint(A.union(B))    # {1, 2, 3, 4, 5, 6}\nprint(A.intersection(B))  # {3, 4}\nprint(A.difference(B))    # {1, 2}\n</code></pre> <p>\u2705 Use Case: Removing duplicate values in datasets, comparing feature sets.</p>"},{"location":"python/07_Data_Structures.html#summary","title":"\ud83d\ude80 Summary","text":"Data Structure Properties Use Case List  \ud83d\udccb Ordered, Mutable Storing datasets, feature lists Tuple \ud83d\udccc Ordered, Immutable Constants, fixed ML configurations Dictionary \ud83d\uddc2\ufe0f Key-Value Pairs, Mutable Fast lookups, JSON data, ML parameters Set \ud83d\udd25 Unordered, Unique Elements Removing duplicates, comparing data"},{"location":"python/07_Data_Structures.html#final-thoughts","title":"\ud83d\udd1a Final Thoughts","text":"<p>Understanding Lists, Tuples, Dictionaries, and Sets is crucial for data processing, feature engineering, and AI applications.</p> <p>Would you like real-world coding exercises on these topics? \ud83d\ude80</p>"},{"location":"python/08_Functions_and_Modules.html","title":"08 \ud83c\udfad Functions and Modules","text":"<p>Functions and modules are essential building blocks in Python, promoting code reuse, modularity, and maintainability. Understanding them is crucial for data science, machine learning, and AI, where reusable code improves efficiency and readability.  </p> <p>This chapter covers defining functions, argument handling, lambda functions, recursion, and working with modules to write efficient, modular, and scalable Python code.</p>"},{"location":"python/08_Functions_and_Modules.html#081-functions-the-building-blocks-of-python","title":"08.1 \ud83c\udfaf Functions: The Building Blocks of Python","text":"<p>A function is a reusable block of code that performs a specific task.</p>"},{"location":"python/08_Functions_and_Modules.html#defining-a-function","title":"\u2705 Defining a Function","text":"<pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"Alice\"))  # Output: Hello, Alice!\n</code></pre> <p>\u2705 Use Case: Encapsulating repetitive code, making programs more readable.</p>"},{"location":"python/08_Functions_and_Modules.html#082-function-arguments-and-parameters","title":"08.2 \ud83c\udfad Function Arguments and Parameters","text":"<p>Functions in Python support different types of arguments:</p>"},{"location":"python/08_Functions_and_Modules.html#positional-arguments","title":"\ud83d\udd39 Positional Arguments","text":"<pre><code>def add(a, b):\n    return a + b\n\nprint(add(5, 3))  # Output: 8\n</code></pre>"},{"location":"python/08_Functions_and_Modules.html#default-arguments","title":"\ud83d\udd39 Default Arguments","text":"<pre><code>def power(base, exponent=2):\n    return base  exponent\n\nprint(power(3))     # Output: 9 (3\u00b2)\nprint(power(3, 3))  # Output: 27 (3\u00b3)\n</code></pre>"},{"location":"python/08_Functions_and_Modules.html#keyword-arguments","title":"\ud83d\udd39 Keyword Arguments","text":"<pre><code>print(power(exponent=3, base=2))  # Output: 8\n</code></pre>"},{"location":"python/08_Functions_and_Modules.html#variable-length-arguments-args-kwargs","title":"\ud83d\udd39 Variable-Length Arguments (*args, **kwargs)","text":"<pre><code>def sum_all(*numbers):\n    return sum(numbers)\n\nprint(sum_all(1, 2, 3, 4))  # Output: 10\n\ndef display_info(info):\n    print(info)\n\ndisplay_info(name=\"Alice\", age=25)\n</code></pre> <p>\u2705 Use Case: Handling dynamic data inputs in ML models, APIs, and automation scripts.</p>"},{"location":"python/08_Functions_and_Modules.html#083-lambda-anonymous-functions","title":"08.3 \u26a1 Lambda (Anonymous) Functions","text":"<p>Lambda functions are short, one-line functions often used in data processing.</p>"},{"location":"python/08_Functions_and_Modules.html#lambda-syntax","title":"\u2705 Lambda Syntax","text":"<pre><code>square = lambda x: x  2\nprint(square(5))  # Output: 25\n</code></pre>"},{"location":"python/08_Functions_and_Modules.html#lambda-with-map-filter-reduce","title":"\ud83d\udd39 Lambda with map(), filter(), reduce()","text":"<pre><code>numbers = [1, 2, 3, 4, 5]\nsquared = list(map(lambda x: x2, numbers))\nprint(squared)  # Output: [1, 4, 9, 16, 25]\n</code></pre> <p>\u2705 Use Case: Data transformations in pandas, NumPy, and machine learning preprocessing.</p>"},{"location":"python/08_Functions_and_Modules.html#084-recursion-functions-calling-themselves","title":"08.4 \ud83d\udd01 Recursion: Functions Calling Themselves","text":"<p>Recursion is used when a problem can be broken down into smaller subproblems.</p>"},{"location":"python/08_Functions_and_Modules.html#factorial-calculation","title":"\u2705 Factorial Calculation","text":"<pre><code>def factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n - 1)\n\nprint(factorial(5))  # Output: 120\n</code></pre> <p>\u2705 Use Case: Tree-based algorithms, graph traversal (DFS), Fibonacci sequence.</p>"},{"location":"python/08_Functions_and_Modules.html#085-python-modules-importing-and-organizing-code","title":"08.5 \ud83d\udce6 Python Modules (Importing and Organizing Code)","text":"<p>Modules allow code organization by grouping related functions and variables.</p>"},{"location":"python/08_Functions_and_Modules.html#importing-a-module","title":"\u2705 Importing a Module","text":"<pre><code>import math\nprint(math.sqrt(25))  # Output: 5.0\n</code></pre>"},{"location":"python/08_Functions_and_Modules.html#importing-specific-functions","title":"\ud83d\udd39 Importing Specific Functions","text":"<pre><code>from math import sqrt\nprint(sqrt(16))  # Output: 4.0\n</code></pre>"},{"location":"python/08_Functions_and_Modules.html#creating-a-custom-module","title":"\ud83d\udd39 Creating a Custom Module","text":"<p>\ud83d\udccc Create a file <code>mymodule.py</code> </p> <pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n</code></pre> <p>\ud83d\udccc Import and Use the Module</p> <pre><code>import mymodule\nprint(mymodule.greet(\"Alice\"))\n</code></pre> <p>\u2705 Use Case: Reusing functions in large AI projects, ML models, and APIs.</p>"},{"location":"python/08_Functions_and_Modules.html#086-working-with-built-in-and-third-party-modules","title":"08.6 \ud83d\udcc2 Working with Built-in and Third-Party Modules","text":""},{"location":"python/08_Functions_and_Modules.html#useful-built-in-modules","title":"\ud83d\udd39 Useful Built-in Modules","text":"Module Purpose <code>math</code> Mathematical functions <code>random</code> Random number generation <code>datetime</code> Date and time operations <code>os</code> File and system operations <code>sys</code> System-related functions <code>re</code> Regular expressions"},{"location":"python/08_Functions_and_Modules.html#installing-using-third-party-modules","title":"\ud83d\udd39 Installing &amp; Using Third-Party Modules","text":"<pre><code>pip install numpy pandas\n</code></pre> <pre><code>import numpy as np\nimport pandas as pd\n</code></pre> <p>\u2705 Use Case: Data science, AI model training, automation.</p>"},{"location":"python/09_Object-Oriented_Programming.html","title":"09 \ud83c\udfd7\ufe0f Object-Oriented","text":"<p>Object-Oriented Programming (OOP) is a programming paradigm that organizes code into reusable objects. It is widely used in data science, machine learning, and AI to manage models, datasets, and complex systems efficiently.</p> <p>This chapter covers classes, objects, inheritance, polymorphism, encapsulation, and abstraction to help structure Python programs for scalability and maintainability.</p>"},{"location":"python/09_Object-Oriented_Programming.html#091-what-is-oop","title":"09.1 \ud83c\udfd7\ufe0f What is OOP?","text":"<p>OOP is based on the concept of objects that contain data (attributes) and functions (methods). This approach makes programs modular, reusable, and easy to maintain.</p>"},{"location":"python/09_Object-Oriented_Programming.html#key-oop-concepts","title":"\ud83d\udd39 Key OOP Concepts","text":"Concept Description Class A blueprint for creating objects Object An instance of a class Encapsulation Hiding internal details of an object Inheritance A child class inherits attributes and methods from a parent class Polymorphism Different classes can have methods with the same name but different behaviors Abstraction Hiding unnecessary implementation details"},{"location":"python/09_Object-Oriented_Programming.html#092-creating-classes-and-objects","title":"09.2 \ud83d\udce6 Creating Classes and Objects","text":"<p>A class is a blueprint for creating objects.</p>"},{"location":"python/09_Object-Oriented_Programming.html#defining-a-class-and-creating-an-object","title":"\u2705 Defining a Class and Creating an Object","text":"<pre><code>class Car:\n    def __init__(self, brand, model):\n        self.brand = brand  # Attribute\n        self.model = model  # Attribute\n\n    def display_info(self):  # Method\n        return f\"{self.brand} {self.model}\"\n\n# Creating an object\ncar1 = Car(\"Toyota\", \"Corolla\")\nprint(car1.display_info())  # Output: Toyota Corolla\n</code></pre> <p>\u2705 Use Case: Creating machine learning models, database records, or simulation objects.</p>"},{"location":"python/09_Object-Oriented_Programming.html#093-encapsulation-data-protection","title":"09.3 \ud83d\udd10 Encapsulation (Data Protection)","text":"<p>Encapsulation restricts direct access to object attributes, ensuring data integrity.</p>"},{"location":"python/09_Object-Oriented_Programming.html#private-variables-in-a-class","title":"\u2705 Private Variables in a Class","text":"<pre><code>class BankAccount:\n    def __init__(self, balance):\n        self.__balance = balance  # Private attribute\n\n    def deposit(self, amount):\n        self.__balance += amount\n\n    def get_balance(self):\n        return self.__balance\n\n# Usage\naccount = BankAccount(1000)\naccount.deposit(500)\nprint(account.get_balance())  # Output: 1500\n</code></pre> <p>\u2705 Use Case: Protecting sensitive data like user credentials, financial data.</p>"},{"location":"python/09_Object-Oriented_Programming.html#094-inheritance-code-reusability","title":"09.4 \ud83d\udd04 Inheritance (Code Reusability)","text":"<p>Inheritance allows a child class to use the properties and methods of a parent class, reducing redundant code.</p>"},{"location":"python/09_Object-Oriented_Programming.html#single-inheritance","title":"\u2705 Single Inheritance","text":"<pre><code>class Animal:\n    def make_sound(self):\n        return \"Some sound\"\n\nclass Dog(Animal):\n    def make_sound(self):\n        return \"Bark\"\n\n# Usage\ndog = Dog()\nprint(dog.make_sound())  # Output: Bark\n</code></pre> <p>\u2705 Use Case: Extending functionality of ML models, custom layers in deep learning.</p>"},{"location":"python/09_Object-Oriented_Programming.html#multiple-inheritance","title":"\ud83d\udd39 Multiple Inheritance","text":"<pre><code>class A:\n    def method_a(self):\n        return \"Method A\"\n\nclass B:\n    def method_b(self):\n        return \"Method B\"\n\nclass C(A, B):  # Inheriting from A and B\n    pass\n\nobj = C()\nprint(obj.method_a())  # Output: Method A\nprint(obj.method_b())  # Output: Method B\n</code></pre> <p>\u2705 Use Case: Combining functionalities from different modules (e.g., ML models + preprocessing steps).</p>"},{"location":"python/09_Object-Oriented_Programming.html#095-polymorphism-multiple-forms","title":"09.5 \ud83d\udd04 Polymorphism (Multiple Forms)","text":"<p>Polymorphism allows different classes to use the same method name but behave differently.</p>"},{"location":"python/09_Object-Oriented_Programming.html#method-overriding","title":"\u2705 Method Overriding","text":"<pre><code>class Shape:\n    def area(self):\n        return \"Area method not implemented\"\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius  2  # Overriding method\n\n# Usage\ncircle = Circle(5)\nprint(circle.area())  # Output: 78.5\n</code></pre> <p>\u2705 Use Case: Implementing AI models with different training methods.</p>"},{"location":"python/09_Object-Oriented_Programming.html#096-abstraction-hiding-implementation-details","title":"09.6 \ud83c\udfad Abstraction (Hiding Implementation Details)","text":"<p>Abstraction hides complex logic and exposes only relevant details.</p>"},{"location":"python/09_Object-Oriented_Programming.html#using-the-abc-module-for-abstraction","title":"\u2705 Using the <code>ABC</code> Module for Abstraction","text":"<pre><code>from abc import ABC, abstractmethod\n\nclass Payment(ABC):  # Abstract Class\n    @abstractmethod\n    def process_payment(self, amount):\n        pass\n\nclass CreditCardPayment(Payment):\n    def process_payment(self, amount):\n        return f\"Processing credit card payment of ${amount}\"\n\n# Usage\npayment = CreditCardPayment()\nprint(payment.process_payment(100))  # Output: Processing credit card payment of $100\n</code></pre> <p>\u2705 Use Case: Defining AI model architecture, creating frameworks for ML algorithms.</p>"},{"location":"python/09_Object-Oriented_Programming.html#097-oop-in-real-world-ai-and-ml","title":"09.7 \ud83d\udee0\ufe0f OOP in Real-World AI and ML","text":""},{"location":"python/09_Object-Oriented_Programming.html#oop-for-machine-learning-models","title":"\u2705 OOP for Machine Learning Models","text":"<pre><code>class MLModel:\n    def train(self, data):\n        return \"Training the model on data\"\n\nclass NeuralNetwork(MLModel):\n    def train(self, data):\n        return \"Training deep learning model\"\n\nmodel1 = MLModel()\nmodel2 = NeuralNetwork()\n\nprint(model1.train(\"Dataset\"))  # Output: Training the model on data\nprint(model2.train(\"Dataset\"))  # Output: Training deep learning model\n</code></pre> <p>\u2705 Use Case: Modularizing ML models and creating reusable AI components.</p>"},{"location":"python/09_Object-Oriented_Programming.html#summary","title":"\ud83d\ude80 Summary","text":"OOP Concept Description Use Case Class &amp; Object Blueprint and instance of an object AI models, Data structures Encapsulation Restricting direct access to attributes Secure financial transactions Inheritance Child class inherits from parent class Model pipelines, feature engineering Polymorphism Same method, different behavior Different AI models processing inputs Abstraction Hiding unnecessary details AI frameworks, APIs"},{"location":"python/09_Object-Oriented_Programming.html#final-thoughts","title":"\ud83d\udd1a Final Thoughts","text":"<p>Object-Oriented Programming enhances modularity and reusability, making it ideal for building scalable ML models, AI systems, and large applications.</p> <p>Would you like real-world coding challenges for hands-on practice? \ud83d\ude80</p>"},{"location":"python/10_Python_Standard_Library.html","title":"10 \ud83e\uddf0 Python Standard Library","text":"<p>The Python Standard Library is a collection of built-in modules and functions that provide powerful functionality without needing external dependencies. It includes modules for mathematical operations, file handling, date/time manipulation, data structures, web services, OS interaction, and more.</p> <p>This chapter explores some of the most useful standard library modules, their features, and how they can simplify Python development.</p>"},{"location":"python/10_Python_Standard_Library.html#101-math-mathematical-operations","title":"10.1 \ud83d\udd22 <code>math</code> \u2013 Mathematical Operations","text":"<p>The <code>math</code> module provides mathematical functions such as trigonometry, logarithms, and factorials.</p>"},{"location":"python/10_Python_Standard_Library.html#common-functions-in-math","title":"\u2705 Common Functions in <code>math</code>","text":"<pre><code>import math\n\nprint(math.sqrt(25))    # Output: 5.0\nprint(math.factorial(5))  # Output: 120\nprint(math.log(100, 10))  # Output: 2.0\nprint(math.pi)  # Output: 3.141592653589793\nprint(math.e)   # Output: 2.718281828459045\n</code></pre> <p>\u2705 Use Case: Calculations in machine learning, data science, and AI models.</p>"},{"location":"python/10_Python_Standard_Library.html#102-random-generating-random-numbers","title":"10.2 \ud83c\udfb2 <code>random</code> \u2013 Generating Random Numbers","text":"<p>The <code>random</code> module helps in random sampling, shuffling, and generating random numbers.</p>"},{"location":"python/10_Python_Standard_Library.html#generating-random-numbers","title":"\u2705 Generating Random Numbers","text":"<pre><code>import random\n\nprint(random.randint(1, 10))  # Random integer between 1 and 10\nprint(random.choice([\"apple\", \"banana\", \"cherry\"]))  # Random choice\nprint(random.sample(range(100), 5))  # 5 random numbers from 0-99\n</code></pre> <p>\u2705 Use Case: Random sampling, AI model parameter initialization, data augmentation.</p>"},{"location":"python/10_Python_Standard_Library.html#103-datetime-working-with-dates-and-time","title":"10.3 \ud83d\udcc6 <code>datetime</code> \u2013 Working with Dates and Time","text":"<p>The <code>datetime</code> module provides tools for date and time manipulation.</p>"},{"location":"python/10_Python_Standard_Library.html#getting-current-date-and-time","title":"\u2705 Getting Current Date and Time","text":"<pre><code>from datetime import datetime\n\nnow = datetime.now()\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\"))  # Output: 2025-03-06 14:30:15\n</code></pre>"},{"location":"python/10_Python_Standard_Library.html#calculating-time-differences","title":"\ud83d\udd39 Calculating Time Differences","text":"<pre><code>from datetime import timedelta\n\nfuture_date = now + timedelta(days=7)\nprint(future_date.strftime(\"%Y-%m-%d\"))  # Output: (7 days ahead)\n</code></pre> <p>\u2705 Use Case: Timestamps in logs, scheduling tasks, time-series analysis.</p>"},{"location":"python/10_Python_Standard_Library.html#104-os-interacting-with-the-operating-system","title":"10.4 \ud83d\udcc2 <code>os</code> \u2013 Interacting with the Operating System","text":"<p>The <code>os</code> module helps manage files, directories, and system operations.</p>"},{"location":"python/10_Python_Standard_Library.html#common-os-operations","title":"\u2705 Common OS Operations","text":"<pre><code>import os\n\nprint(os.getcwd())  # Get current working directory\nos.mkdir(\"new_folder\")  # Create a new folder\nos.rename(\"old_file.txt\", \"new_file.txt\")  # Rename a file\nos.remove(\"new_file.txt\")  # Delete a file\n</code></pre> <p>\u2705 Use Case: File automation, script execution, managing system resources.</p>"},{"location":"python/10_Python_Standard_Library.html#105-sys-system-specific-functions","title":"10.5 \ud83d\udcdc <code>sys</code> \u2013 System-Specific Functions","text":"<p>The <code>sys</code> module provides functions related to the Python interpreter and command-line arguments.</p>"},{"location":"python/10_Python_Standard_Library.html#getting-command-line-arguments","title":"\u2705 Getting Command-Line Arguments","text":"<pre><code>import sys\nprint(sys.argv)  # List of command-line arguments\n</code></pre>"},{"location":"python/10_Python_Standard_Library.html#exiting-the-program","title":"\ud83d\udd39 Exiting the Program","text":"<pre><code>sys.exit(\"Terminating program\")\n</code></pre> <p>\u2705 Use Case: Handling script execution arguments, system interaction.</p>"},{"location":"python/10_Python_Standard_Library.html#106-re-regular-expressions-pattern-matching","title":"10.6 \ud83d\udd0d <code>re</code> \u2013 Regular Expressions (Pattern Matching)","text":"<p>The <code>re</code> module provides powerful text searching and pattern matching.</p>"},{"location":"python/10_Python_Standard_Library.html#searching-for-patterns","title":"\u2705 Searching for Patterns","text":"<pre><code>import re\n\ntext = \"My email is example@gmail.com\"\nmatch = re.search(r\"\\w+@\\w+\\.\\w+\", text)\nif match:\n    print(match.group())  # Output: example@gmail.com\n</code></pre> <p>\u2705 Use Case: Data cleaning, log processing, text extraction in NLP.</p>"},{"location":"python/10_Python_Standard_Library.html#107-urllib-fetching-web-data","title":"10.7 \ud83d\udce1 <code>urllib</code> \u2013 Fetching Web Data","text":"<p>The <code>urllib</code> module allows sending HTTP requests and fetching web content.</p>"},{"location":"python/10_Python_Standard_Library.html#downloading-a-webpage","title":"\u2705 Downloading a Webpage","text":"<pre><code>import urllib.request\n\nresponse = urllib.request.urlopen(\"https://www.python.org\")\nhtml = response.read().decode(\"utf-8\")\nprint(html[:200])  # Prints first 200 characters of HTML\n</code></pre> <p>\u2705 Use Case: Web scraping, downloading datasets, API calls.</p>"},{"location":"python/10_Python_Standard_Library.html#108-json-handling-json-data","title":"10.8 \ud83d\uddc3\ufe0f <code>json</code> \u2013 Handling JSON Data","text":"<p>The <code>json</code> module allows converting Python objects to JSON format and vice versa.</p>"},{"location":"python/10_Python_Standard_Library.html#converting-python-dictionary-to-json","title":"\u2705 Converting Python Dictionary to JSON","text":"<pre><code>import json\n\ndata = {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\njson_data = json.dumps(data)\nprint(json_data)  # Output: JSON formatted string\n</code></pre>"},{"location":"python/10_Python_Standard_Library.html#parsing-json-data","title":"\ud83d\udd39 Parsing JSON Data","text":"<pre><code>parsed_data = json.loads(json_data)\nprint(parsed_data[\"name\"])  # Output: Alice\n</code></pre> <p>\u2705 Use Case: Handling API responses, saving structured data.</p>"},{"location":"python/10_Python_Standard_Library.html#109-csv-reading-and-writing-csv-files","title":"10.9 \ud83d\udd04 <code>csv</code> \u2013 Reading and Writing CSV Files","text":"<p>The <code>csv</code> module allows handling comma-separated values (CSV) files, commonly used in data science.</p>"},{"location":"python/10_Python_Standard_Library.html#reading-a-csv-file","title":"\u2705 Reading a CSV File","text":"<pre><code>import csv\n\nwith open(\"data.csv\", newline=\"\") as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)\n</code></pre> <p>\u2705 Use Case: Reading structured datasets for ML training.</p>"},{"location":"python/10_Python_Standard_Library.html#1010-collections-advanced-data-structures","title":"10.10 \ud83d\uddc2\ufe0f <code>collections</code> \u2013 Advanced Data Structures","text":"<p>The <code>collections</code> module provides specialized data structures like deque, Counter, defaultdict.</p>"},{"location":"python/10_Python_Standard_Library.html#counting-elements-with-counter","title":"\u2705 Counting Elements with Counter","text":"<pre><code>from collections import Counter\n\ndata = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\"]\ncounter = Counter(data)\nprint(counter)  # Output: {'apple': 3, 'banana': 2, 'orange': 1}\n</code></pre> <p>\u2705 Use Case: Counting words in NLP, tracking data occurrences.</p>"},{"location":"python/10_Python_Standard_Library.html#summary-of-useful-python-standard-library-modules","title":"\ud83d\ude80 Summary of Useful Python Standard Library Modules","text":"Module Purpose math Mathematical operations (sqrt, factorial, log, pi) random Random number generation, shuffling datetime Date and time handling os OS file management (create, rename, delete) sys System operations, command-line arguments re Regular expressions for pattern matching urllib Web requests and data fetching json JSON data encoding/decoding csv Reading and writing CSV files collections Advanced data structures (Counter, deque)"},{"location":"python/10_Python_Standard_Library.html#final-thoughts","title":"\ud83d\udd1a Final Thoughts","text":"<p>The Python Standard Library provides powerful tools for data processing, automation, system operations, and web interactions. Mastering these modules helps in building efficient Python programs.</p> <p>Would you like hands-on exercises on these modules? \ud83d\ude80</p>"},{"location":"python/11_File_Handling_and_IO.html","title":"11 \ud83c\udf10 File Handling","text":"<p>File handling is an essential part of programming, allowing reading, writing, and manipulating files. In data science, machine learning, and AI, working with text files, CSV files, and logs is common for storing and processing large datasets.  </p> <p>This chapter covers file handling operations, including reading, writing, appending, working with different file formats, and error handling.</p>"},{"location":"python/11_File_Handling_and_IO.html#111-working-with-files-in-python","title":"11.1 \ud83d\udcc2 Working with Files in Python","text":"<p>Python provides built-in functions for opening, reading, writing, and closing files.</p>"},{"location":"python/11_File_Handling_and_IO.html#opening-a-file","title":"\u2705 Opening a File","text":"<pre><code>file = open(\"example.txt\", \"r\")  # Open a file in read mode\nprint(file.read())  # Read the entire file content\nfile.close()  # Always close the file after use\n</code></pre> <p>\u2705 Use Case: Reading log files, dataset files, configuration files.</p>"},{"location":"python/11_File_Handling_and_IO.html#112-writing-to-a-file","title":"11.2 \ud83d\udcdd Writing to a File","text":"<p>To write to a file, use write ('w') mode. If the file doesn\u2019t exist, Python creates a new file.</p>"},{"location":"python/11_File_Handling_and_IO.html#writing-data","title":"\u2705 Writing Data","text":"<pre><code>file = open(\"example.txt\", \"w\")  # Open in write mode\nfile.write(\"Hello, Python!\\nWelcome to File Handling.\")\nfile.close()\n</code></pre> <p>\ud83d\udd39 Note: <code>'w'</code> mode overwrites existing content. To append, use <code>'a'</code>.</p>"},{"location":"python/11_File_Handling_and_IO.html#appending-data-to-an-existing-file","title":"\u2705 Appending Data to an Existing File","text":"<pre><code>file = open(\"example.txt\", \"a\")\nfile.write(\"\\nThis is an additional line.\")\nfile.close()\n</code></pre> <p>\u2705 Use Case: Logging data, saving AI/ML model outputs.</p>"},{"location":"python/11_File_Handling_and_IO.html#113-reading-files-efficiently","title":"11.3 \ud83d\udcd6 Reading Files Efficiently","text":"<p>Python provides different ways to read files efficiently.</p>"},{"location":"python/11_File_Handling_and_IO.html#reading-a-file-line-by-line","title":"\u2705 Reading a File Line by Line","text":"<pre><code>file = open(\"example.txt\", \"r\")\n\nfor line in file:\n    print(line.strip())  # Removing extra newlines\nfile.close()\n</code></pre> <p>\u2705 Use Case: Processing large datasets without memory overflow.</p>"},{"location":"python/11_File_Handling_and_IO.html#using-readlines-to-read-all-lines-as-a-list","title":"\ud83d\udd39 Using <code>readlines()</code> to Read All Lines as a List","text":"<pre><code>file = open(\"example.txt\", \"r\")\nlines = file.readlines()\nprint(lines)  # Output: List of lines in the file\nfile.close()\n</code></pre> <p>\u2705 Use Case: Reading structured text data (e.g., logs, reports).</p>"},{"location":"python/11_File_Handling_and_IO.html#114-using-with-statement-for-file-handling","title":"11.4 \ud83d\ude80 Using <code>with</code> Statement for File Handling","text":"<p>Using <code>with open()</code> ensures that the file automatically closes after execution.</p>"},{"location":"python/11_File_Handling_and_IO.html#safe-file-handling-with-with","title":"\u2705 Safe File Handling with <code>with</code>","text":"<pre><code>with open(\"example.txt\", \"r\") as file:\n    content = file.read()\n    print(content)\n</code></pre> <p>\u2705 Use Case: Better memory management, avoiding file lock issues.</p>"},{"location":"python/11_File_Handling_and_IO.html#115-handling-different-file-formats","title":"11.5 \ud83d\udcca Handling Different File Formats","text":""},{"location":"python/11_File_Handling_and_IO.html#working-with-csv-files-csv-module","title":"\ud83d\udd39 Working with CSV Files (<code>csv</code> Module)","text":"<pre><code>import csv\n\nwith open(\"data.csv\", \"r\") as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)  # Output: List of values in each row\n</code></pre> <p>\u2705 Use Case: Reading structured datasets in ML models.</p>"},{"location":"python/11_File_Handling_and_IO.html#writing-to-a-csv-file","title":"\ud83d\udd39 Writing to a CSV File","text":"<pre><code>with open(\"output.csv\", \"w\", newline=\"\") as file:\n    writer = csv.writer(file)\n    writer.writerow([\"Name\", \"Age\"])\n    writer.writerow([\"Alice\", 25])\n</code></pre> <p>\u2705 Use Case: Saving processed data from AI pipelines.</p>"},{"location":"python/11_File_Handling_and_IO.html#working-with-json-files-json-module","title":"\ud83d\udd39 Working with JSON Files (<code>json</code> Module)","text":"<pre><code>import json\n\ndata = {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\n\n# Writing JSON data\nwith open(\"data.json\", \"w\") as file:\n    json.dump(data, file)\n\n# Reading JSON data\nwith open(\"data.json\", \"r\") as file:\n    loaded_data = json.load(file)\nprint(loaded_data)  # Output: {'name': 'Alice', 'age': 25, 'city': 'New York'}\n</code></pre> <p>\u2705 Use Case: Handling API responses, configuration files, AI model metadata.</p>"},{"location":"python/11_File_Handling_and_IO.html#116-error-handling-in-file-operations","title":"11.6 \ud83d\udee0\ufe0f Error Handling in File Operations","text":"<p>It\u2019s important to handle file-related errors to prevent crashes.</p>"},{"location":"python/11_File_Handling_and_IO.html#handling-file-not-found-error","title":"\u2705 Handling File Not Found Error","text":"<pre><code>try:\n    with open(\"non_existent.txt\", \"r\") as file:\n        content = file.read()\nexcept FileNotFoundError:\n    print(\"Error: File not found!\")\n</code></pre> <p>\u2705 Use Case: Ensuring robust scripts in production AI pipelines.</p>"},{"location":"python/11_File_Handling_and_IO.html#117-working-with-directories-os-module","title":"11.7 \ud83d\udcc2 Working with Directories (<code>os</code> Module)","text":"<p>The <code>os</code> module allows working with directories and file management.</p>"},{"location":"python/11_File_Handling_and_IO.html#listing-files-in-a-directory","title":"\u2705 Listing Files in a Directory","text":"<pre><code>import os\n\nprint(os.listdir(\".\"))  # Lists all files in the current directory\n</code></pre>"},{"location":"python/11_File_Handling_and_IO.html#creating-and-deleting-folders","title":"\ud83d\udd39 Creating and Deleting Folders","text":"<pre><code>os.mkdir(\"new_folder\")  # Create a folder\nos.rmdir(\"new_folder\")  # Remove a folder\n</code></pre> <p>\u2705 Use Case: Managing dataset directories in ML projects.</p>"},{"location":"python/11_File_Handling_and_IO.html#summary","title":"Summary","text":"Concept Description Use Case Reading Files <code>open(\"file.txt\", \"r\")</code> Loading datasets, logs Writing Files <code>open(\"file.txt\", \"w\")</code> Saving AI model results Appending to Files <code>open(\"file.txt\", \"a\")</code> Logging incremental data Using <code>with</code> Statement Ensures safe file handling Avoids resource leaks CSV Handling <code>csv.reader()</code>, <code>csv.writer()</code> Working with structured data JSON Handling <code>json.load()</code>, <code>json.dump()</code> API responses, metadata storage Error Handling <code>try-except</code> for missing files Prevents crashes in AI pipelines Directory Management <code>os.listdir()</code>, <code>os.mkdir()</code> Managing datasets and logs"},{"location":"python/11_File_Handling_and_IO.html#final-thoughts","title":"Final Thoughts","text":"<p>Mastering file handling and I/O is essential for data processing, logging, and storage in AI, ML, and automation projects.</p> <p>Would you like real-world coding exercises for practice? \ud83d\ude80</p>"},{"location":"python/12_Exception_Handling_and_Debugging.html","title":"12 \u26a1 Errors and Debugging","text":"<p>Errors are inevitable in programming. Python provides exception handling and debugging tools to ensure programs fail gracefully and help identify issues efficiently. Exception handling improves code reliability, while debugging helps track and fix errors.</p> <p>This chapter covers handling exceptions with <code>try-except-finally</code>, built-in exceptions, raising custom exceptions, logging errors, and debugging techniques.</p>"},{"location":"python/12_Exception_Handling_and_Debugging.html#121-understanding-errors-in-python","title":"12.1 \u274c Understanding Errors in Python","text":"<p>Python has two main types of errors:  </p>"},{"location":"python/12_Exception_Handling_and_Debugging.html#syntax-errors-parsing-errors","title":"\ud83d\udd39 Syntax Errors (Parsing Errors)","text":"<p>Occurs when Python encounters an incorrectly written statement.</p> <pre><code>print(\"Hello\"  # Missing closing parenthesis -&gt; SyntaxError\n</code></pre> <p>\u2705 Fix: Ensure correct syntax.</p>"},{"location":"python/12_Exception_Handling_and_Debugging.html#runtime-errors-exceptions","title":"\ud83d\udd39 Runtime Errors (Exceptions)","text":"<p>Occur during execution, such as dividing by zero or accessing an undefined variable.</p> <pre><code>x = 5 / 0  # ZeroDivisionError\n</code></pre> <p>Python provides built-in exception types, such as:  </p> Exception Type Description <code>ZeroDivisionError</code> Division by zero error <code>TypeError</code> Invalid operation on incompatible data types <code>ValueError</code> Function receives incorrect data type <code>IndexError</code> Accessing an invalid index in a list <code>KeyError</code> Accessing a missing key in a dictionary <code>FileNotFoundError</code> Attempting to open a non-existent file"},{"location":"python/12_Exception_Handling_and_Debugging.html#122-handling-exceptions-with-try-except","title":"12.2 \ud83d\udee0\ufe0f Handling Exceptions with <code>try-except</code>","text":"<p>The <code>try-except</code> block catches runtime errors and prevents program crashes.</p>"},{"location":"python/12_Exception_Handling_and_Debugging.html#basic-exception-handling","title":"\u2705 Basic Exception Handling","text":"<pre><code>try:\n    x = 5 / 0\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\n</code></pre> <p>Output:  </p> <pre><code>Cannot divide by zero!\n</code></pre> <p>\u2705 Use Case: Handling invalid user inputs, avoiding crashes in AI applications.</p>"},{"location":"python/12_Exception_Handling_and_Debugging.html#123-handling-multiple-exceptions","title":"12.3 \ud83d\udd04 Handling Multiple Exceptions","text":"<p>Multiple exceptions can be handled in a single <code>try-except</code> block.</p> <pre><code>try:\n    num = int(\"Python\")  # Causes ValueError\nexcept (ValueError, TypeError):\n    print(\"Invalid input!\")\n</code></pre> <p>\u2705 Use Case: Handling diverse input errors in data processing pipelines.</p>"},{"location":"python/12_Exception_Handling_and_Debugging.html#124-using-finally-for-cleanup","title":"12.4 \ud83d\udccc Using <code>finally</code> for Cleanup","text":"<p>The <code>finally</code> block executes whether an exception occurs or not.</p> <pre><code>try:\n    file = open(\"example.txt\", \"r\")\n    print(file.read())\nexcept FileNotFoundError:\n    print(\"File not found!\")\nfinally:\n    print(\"Closing the file.\")  # Always runs\n</code></pre> <p>\u2705 Use Case: Ensuring file/database connections are properly closed.</p>"},{"location":"python/12_Exception_Handling_and_Debugging.html#125-raising-custom-exceptions-raise","title":"12.5 \ud83d\ude80 Raising Custom Exceptions (<code>raise</code>)","text":"<p>Use <code>raise</code> to define custom exceptions for better debugging.</p> <pre><code>def check_age(age):\n    if age &lt; 18:\n        raise ValueError(\"Age must be 18 or above\")\n    return \"Access granted\"\n\nprint(check_age(15))  # Raises ValueError\n</code></pre> <p>\u2705 Use Case: Enforcing validation rules in APIs and ML models.</p>"},{"location":"python/12_Exception_Handling_and_Debugging.html#126-logging-errors-logging-module","title":"12.6 \ud83d\udcdd Logging Errors (<code>logging</code> Module)","text":"<p>Instead of printing errors, use logging to track them efficiently.</p> <pre><code>import logging\n\nlogging.basicConfig(filename=\"app.log\", level=logging.ERROR)\n\ntry:\n    result = 5 / 0\nexcept ZeroDivisionError as e:\n    logging.error(f\"Error occurred: {e}\")\n</code></pre> <p>\u2705 Use Case: Tracking issues in AI applications, logging errors in production.</p>"},{"location":"python/12_Exception_Handling_and_Debugging.html#127-debugging-techniques","title":"12.7 \ud83d\udc1b Debugging Techniques","text":"<p>Debugging helps find and fix issues before deployment.</p>"},{"location":"python/12_Exception_Handling_and_Debugging.html#using-print-for-debugging","title":"\ud83d\udd39 Using <code>print()</code> for Debugging","text":"<pre><code>def add(a, b):\n    print(f\"Adding {a} and {b}\")  # Debugging output\n    return a + b\n\nprint(add(5, 3))\n</code></pre> <p>\u2705 Use Case: Checking function execution and variable values.</p>"},{"location":"python/12_Exception_Handling_and_Debugging.html#using-assert-for-testing","title":"\ud83d\udd39 Using <code>assert</code> for Testing","text":"<p><code>assert</code> helps validate assumptions in the code.</p> <pre><code>def divide(a, b):\n    assert b != 0, \"Denominator cannot be zero\"\n    return a / b\n\nprint(divide(10, 2))  # Runs fine\nprint(divide(10, 0))  # Raises AssertionError\n</code></pre> <p>\u2705 Use Case: Preventing invalid inputs in ML models.</p>"},{"location":"python/12_Exception_Handling_and_Debugging.html#debugging-with-pdb-python-debugger","title":"\ud83d\udd39 Debugging with <code>pdb</code> (Python Debugger)","text":"<p><code>pdb</code> allows step-by-step execution.</p> <pre><code>import pdb\n\ndef multiply(x, y):\n    pdb.set_trace()  # Debugging breakpoint\n    return x * y\n\nprint(multiply(3, 4))\n</code></pre> <p>\u2705 Use Case: Investigating code behavior interactively.</p>"},{"location":"python/12_Exception_Handling_and_Debugging.html#128-best-practices-for-exception-handling-debugging","title":"12.8 \ud83d\udee0\ufe0f Best Practices for Exception Handling &amp; Debugging","text":"<p>\u2705 DO:</p> <ul> <li>Use specific exceptions (<code>ZeroDivisionError</code>, <code>FileNotFoundError</code>)</li> <li>Use logging instead of <code>print()</code></li> <li>Use <code>finally</code> for resource cleanup</li> <li>Use assertions for quick debugging</li> </ul> <p>\u274c AVOID:</p> <ul> <li>Using <code>except:</code> without specifying the exception</li> <li>Silencing exceptions (<code>pass</code> inside <code>except</code>)</li> <li>Overusing <code>try-except</code> in simple operations</li> </ul>"},{"location":"python/12_Exception_Handling_and_Debugging.html#summary","title":"\ud83d\ude80 Summary","text":"Concept Description Use Case try-except Catches runtime errors Handling invalid inputs Multiple Exceptions Catches different errors Complex workflows finally Executes cleanup code Closing files/databases raise Throws custom exceptions Enforcing validation logging Saves errors to a log file Debugging production apps assert Ensures correct values Quick testing pdb Interactive debugging Step-by-step execution"},{"location":"python/12_Exception_Handling_and_Debugging.html#final-thoughts","title":"\ud83d\udd1a Final Thoughts","text":"<p>Mastering exception handling and debugging is essential for writing robust, error-free Python applications.</p> <p>Would you like hands-on debugging exercises? \ud83d\ude80</p>"},{"location":"python/13_Web_Development.html","title":"13 \ud83d\udce1 Web Development","text":"<p>Python is a powerful language for web development, offering a variety of frameworks for building web applications, APIs, and documentation sites. This chapter covers Flask, FastAPI, MkDocs, and Streamlit, widely used for web applications, REST APIs, documentation, and data visualization.</p>"},{"location":"python/13_Web_Development.html#131-overview-of-python-web-development","title":"13.1 \ud83c\udf0d Overview of Python Web Development","text":"<p>Python provides lightweight and scalable web frameworks for different needs:</p> Framework Purpose Flask Lightweight, flexible web framework FastAPI High-performance API framework for modern web applications MkDocs Static site generator for documentation Streamlit Framework for building data-driven web apps"},{"location":"python/13_Web_Development.html#132-flask-lightweight-web-framework","title":"13.2 \ud83c\udfd7\ufe0f Flask \u2013 Lightweight Web Framework","text":"<p>Flask is a minimalistic and easy-to-use web framework, widely used for small to medium-sized web apps.</p>"},{"location":"python/13_Web_Development.html#installing-flask","title":"\u2705 Installing Flask","text":"<pre><code>pip install flask\n</code></pre>"},{"location":"python/13_Web_Development.html#creating-a-simple-flask-app","title":"\ud83d\udd39 Creating a Simple Flask App","text":"<pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef home():\n    return \"Hello, Flask!\"\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre> <p>\ud83d\udd39 Run the app:</p> <pre><code>python app.py\n</code></pre> <p>\ud83d\udd39 Visit <code>http://137.0.0.1:5000/</code> in your browser.</p>"},{"location":"python/13_Web_Development.html#handling-routes-url-parameters","title":"\ud83d\udd39 Handling Routes &amp; URL Parameters","text":"<pre><code>@app.route(\"/user/&lt;name&gt;\")\ndef greet_user(name):\n    return f\"Hello, {name}!\"\n</code></pre> <p>\u2705 Use Case: Building web dashboards, small applications, and APIs.</p>"},{"location":"python/13_Web_Development.html#133-fastapi-high-performance-apis","title":"13.3 \ud83d\ude80 FastAPI \u2013 High-Performance APIs","text":"<p>FastAPI is a modern, fast framework for building APIs with automatic documentation and async support.</p>"},{"location":"python/13_Web_Development.html#installing-fastapi","title":"\u2705 Installing FastAPI","text":"<pre><code>pip install fastapi uvicorn\n</code></pre>"},{"location":"python/13_Web_Development.html#creating-a-simple-fastapi-app","title":"\ud83d\udd39 Creating a Simple FastAPI App","text":"<pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef home():\n    return {\"message\": \"Hello, FastAPI!\"}\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"137.0.0.1\", port=8000)\n</code></pre> <p>\ud83d\udd39 Run the app:</p> <pre><code>uvicorn app:app --reload\n</code></pre> <p>\ud83d\udd39 Visit the automatic API docs:  </p> <ul> <li>Swagger UI: <code>http://137.0.0.1:8000/docs</code></li> <li>ReDoc: <code>http://137.0.0.1:8000/redoc</code></li> </ul>"},{"location":"python/13_Web_Development.html#handling-api-requests","title":"\ud83d\udd39 Handling API Requests","text":"<pre><code>@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int):\n    return {\"item_id\": item_id}\n</code></pre> <p>\u2705 Use Case: Building REST APIs, microservices, AI model deployment.</p>"},{"location":"python/13_Web_Development.html#134-mkdocs-documentation-for-python-projects","title":"13.4 \ud83d\udcd6 MkDocs \u2013 Documentation for Python Projects","text":"<p>MkDocs is a static site generator used for creating project documentation.</p>"},{"location":"python/13_Web_Development.html#installing-mkdocs","title":"\u2705 Installing MkDocs","text":"<pre><code>pip install mkdocs\n</code></pre>"},{"location":"python/13_Web_Development.html#creating-a-new-documentation-site","title":"\ud83d\udd39 Creating a New Documentation Site","text":"<pre><code>mkdocs new my_docs\ncd my_docs\nmkdocs serve\n</code></pre> <p>\ud83d\udd39 View your documentation: Visit <code>http://137.0.0.1:8000/</code> in your browser.</p>"},{"location":"python/13_Web_Development.html#adding-markdown-content","title":"\ud83d\udd39 Adding Markdown Content","text":"<p>Edit <code>docs/index.md</code>:</p> <pre><code># Welcome to My Docs\nThis is a test documentation page.\n</code></pre>"},{"location":"python/13_Web_Development.html#building-the-site","title":"\ud83d\udd39 Building the Site","text":"<pre><code>mkdocs build\n</code></pre> <p>\u2705 Use Case: Project documentation, API documentation, internal guides.</p>"},{"location":"python/13_Web_Development.html#135-streamlit-building-data-driven-web-apps","title":"13.5 \ud83d\udcca Streamlit \u2013 Building Data-Driven Web Apps","text":"<p>Streamlit is a simple framework for building interactive web applications for data visualization.</p>"},{"location":"python/13_Web_Development.html#installing-streamlit","title":"\u2705 Installing Streamlit","text":"<pre><code>pip install streamlit\n</code></pre>"},{"location":"python/13_Web_Development.html#creating-a-simple-streamlit-app","title":"\ud83d\udd39 Creating a Simple Streamlit App","text":"<p>Create <code>app.py</code>:</p> <pre><code>import streamlit as st\n\nst.title(\"Hello, Streamlit!\")\nst.write(\"This is a simple web app using Streamlit.\")\n</code></pre> <p>\ud83d\udd39 Run the app:</p> <pre><code>streamlit run app.py\n</code></pre> <p>\ud83d\udd39 View the app in the browser at <code>http://localhost:8501/</code>.</p>"},{"location":"python/13_Web_Development.html#adding-user-input-and-charts","title":"\ud83d\udd39 Adding User Input and Charts","text":"<pre><code>import pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame(\n    np.random.randn(10, 2),\n    columns=['A', 'B']\n)\n\nst.line_chart(data)\n</code></pre> <p>\u2705 Use Case: Building dashboards, AI model visualizations, interactive reports.</p>"},{"location":"python/13_Web_Development.html#summary","title":"\ud83d\ude80 Summary","text":"Framework Purpose Best For Flask Simple web applications Small apps, dashboards FastAPI High-speed APIs REST APIs, ML model deployment MkDocs Documentation generator API and project documentation Streamlit Data-driven web apps ML dashboards, data visualization"},{"location":"python/13_Web_Development.html#final-thoughts","title":"\ud83d\udd1a Final Thoughts","text":"<p>Python offers powerful tools for web development, APIs, and data visualization. Would you like step-by-step projects on Flask, FastAPI, MkDocs, or Streamlit? \ud83d\ude80</p>"},{"location":"python/14_Data_Science.html","title":"14 \ud83d\udcca Data Science","text":"<p>Data Science involves analyzing, processing, and visualizing data to derive insights. Python is widely used in Data Science due to its rich ecosystem of libraries. This chapter covers NumPy, Pandas, and Matplotlib, the three core libraries for data manipulation, analysis, and visualization.</p>"},{"location":"python/14_Data_Science.html#141-numpy-numerical-computing","title":"14.1 \ud83d\udd22 NumPy \u2013 Numerical Computing","text":"<p>NumPy (Numerical Python) provides fast, efficient array operations and is the foundation for scientific computing in Python.</p>"},{"location":"python/14_Data_Science.html#installing-numpy","title":"\u2705 Installing NumPy","text":"<pre><code>pip install numpy\n</code></pre>"},{"location":"python/14_Data_Science.html#creating-numpy-arrays","title":"\ud83d\udd39 Creating NumPy Arrays","text":"<pre><code>import numpy as np\n\narr = np.array([1, 2, 3, 4, 5])\nprint(arr)  # Output: [1 2 3 4 5]\n</code></pre>"},{"location":"python/14_Data_Science.html#numpy-array-operations","title":"\ud83d\udd39 NumPy Array Operations","text":"<pre><code>a = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\n\nprint(a + b)  # Output: [5 7 9]\nprint(a * b)  # Output: [4 10 18]\nprint(np.dot(a, b))  # Dot product: 1*4 + 2*5 + 3*6 = 32\n</code></pre>"},{"location":"python/14_Data_Science.html#generating-random-data","title":"\ud83d\udd39 Generating Random Data","text":"<pre><code>random_numbers = np.random.rand(5)  # 5 random numbers\nprint(random_numbers)\n</code></pre> <p>\u2705 Use Case: Data preprocessing, handling large numerical datasets efficiently.</p>"},{"location":"python/14_Data_Science.html#142-pandas-data-manipulation","title":"14.2 \ud83d\uddc3\ufe0f Pandas \u2013 Data Manipulation","text":"<p>Pandas simplifies working with structured data (tables, CSVs, JSONs, databases).</p>"},{"location":"python/14_Data_Science.html#installing-pandas","title":"\u2705 Installing Pandas","text":"<pre><code>pip install pandas\n</code></pre>"},{"location":"python/14_Data_Science.html#creating-a-dataframe","title":"\ud83d\udd39 Creating a DataFrame","text":"<pre><code>import pandas as pd\n\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"Salary\": [50000, 60000, 70000]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n</code></pre>"},{"location":"python/14_Data_Science.html#reading-data-from-csv","title":"\ud83d\udd39 Reading Data from CSV","text":"<pre><code>df = pd.read_csv(\"data.csv\")\nprint(df.head())  # Display first 5 rows\n</code></pre>"},{"location":"python/14_Data_Science.html#filtering-data","title":"\ud83d\udd39 Filtering Data","text":"<pre><code>young_employees = df[df[\"Age\"] &lt; 30]\nprint(young_employees)\n</code></pre>"},{"location":"python/14_Data_Science.html#adding-a-new-column","title":"\ud83d\udd39 Adding a New Column","text":"<pre><code>df[\"Bonus\"] = df[\"Salary\"] * 0.10  # 10% bonus\nprint(df)\n</code></pre> <p>\u2705 Use Case: Handling datasets, cleaning and preparing data for ML models.</p>"},{"location":"python/14_Data_Science.html#143-matplotlib-data-visualization","title":"14.3 \ud83d\udcca Matplotlib \u2013 Data Visualization","text":"<p>Matplotlib is the primary library for plotting graphs and visualizing data.</p>"},{"location":"python/14_Data_Science.html#installing-matplotlib","title":"\u2705 Installing Matplotlib","text":"<pre><code>pip install matplotlib\n</code></pre>"},{"location":"python/14_Data_Science.html#plotting-a-line-graph","title":"\ud83d\udd39 Plotting a Line Graph","text":"<pre><code>import matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4, 5]\ny = [10, 15, 20, 25, 30]\n\nplt.plot(x, y, marker=\"o\", linestyle=\"-\")\nplt.xlabel(\"X-axis\")\nplt.ylabel(\"Y-axis\")\nplt.title(\"Simple Line Plot\")\nplt.show()\n</code></pre>"},{"location":"python/14_Data_Science.html#creating-a-bar-chart","title":"\ud83d\udd39 Creating a Bar Chart","text":"<pre><code>categories = [\"A\", \"B\", \"C\", \"D\"]\nvalues = [10, 20, 15, 25]\n\nplt.bar(categories, values, color=\"blue\")\nplt.title(\"Bar Chart Example\")\nplt.show()\n</code></pre>"},{"location":"python/14_Data_Science.html#creating-a-histogram","title":"\ud83d\udd39 Creating a Histogram","text":"<pre><code>data = np.random.randn(1000)\n\nplt.hist(data, bins=30, color=\"green\")\nplt.title(\"Histogram of Random Data\")\nplt.show()\n</code></pre> <p>\u2705 Use Case: Exploratory Data Analysis (EDA), understanding dataset distributions.</p>"},{"location":"python/14_Data_Science.html#summary","title":"\ud83d\ude80 Summary","text":"Library Purpose Best For NumPy Fast numerical computing Arrays, linear algebra, statistics Pandas Data manipulation CSVs, databases, data wrangling Matplotlib Data visualization Graphs, charts, and plots"},{"location":"python/14_Data_Science.html#final-thoughts","title":"\ud83d\udd1a Final Thoughts","text":"<p>Mastering NumPy, Pandas, and Matplotlib is essential for data science, machine learning, and AI applications. Would you like practical projects to apply these concepts? \ud83d\ude80</p>"},{"location":"python/15_Machine_Learning_and_AI.html","title":"15 \ud83e\udde0 Machine Learning and AI","text":"<p>Machine Learning (ML) and Artificial Intelligence (AI) enable computers to learn from data and make predictions. Python is the leading language for ML &amp; AI due to its rich ecosystem of libraries.  </p> <p>This chapter covers scikit-learn, TensorFlow, and PyTorch, which are widely used for data preprocessing, building ML models, and deep learning applications.</p>"},{"location":"python/15_Machine_Learning_and_AI.html#151-what-is-machine-learning","title":"15.1 \ud83d\udd0d What is Machine Learning?","text":"<p>Machine Learning is a subset of AI that focuses on teaching computers to learn from data. It is classified into:  </p> Type Description Example Supervised Learning Uses labeled data Spam detection, house price prediction Unsupervised Learning Finds hidden patterns Clustering customers, anomaly detection Reinforcement Learning Learns by trial and error Game AI, robotics"},{"location":"python/15_Machine_Learning_and_AI.html#152-scikit-learn-machine-learning-for-beginners","title":"15.2 \ud83d\udee0\ufe0f Scikit-Learn \u2013 Machine Learning for Beginners","text":"<p>Scikit-learn is a simple and powerful ML library for classification, regression, clustering, and preprocessing.</p>"},{"location":"python/15_Machine_Learning_and_AI.html#installing-scikit-learn","title":"\u2705 Installing Scikit-Learn","text":"<pre><code>pip install scikit-learn\n</code></pre>"},{"location":"python/15_Machine_Learning_and_AI.html#loading-a-dataset","title":"\ud83d\udd39 Loading a Dataset","text":"<pre><code>from sklearn.datasets import load_iris\nimport pandas as pd\n\niris = load_iris()\ndf = pd.DataFrame(iris.data, columns=iris.feature_names)\nprint(df.head())\n</code></pre> <p>\u2705 Use Case: Loading datasets for training ML models.</p>"},{"location":"python/15_Machine_Learning_and_AI.html#training-a-simple-classifier","title":"\ud83d\udd39 Training a Simple Classifier","text":"<pre><code>from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Load dataset\nX, y = iris.data, iris.target\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X_train, y_train)\n\n# Make predictions\ny_pred = clf.predict(X_test)\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))\n</code></pre> <p>\u2705 Use Case: Building predictive models for classification problems.</p>"},{"location":"python/15_Machine_Learning_and_AI.html#153-tensorflow-deep-learning-framework","title":"15.3 \ud83e\udd16 TensorFlow \u2013 Deep Learning Framework","text":"<p>TensorFlow is a powerful framework for building deep learning models.</p>"},{"location":"python/15_Machine_Learning_and_AI.html#installing-tensorflow","title":"\u2705 Installing TensorFlow","text":"<pre><code>pip install tensorflow\n</code></pre>"},{"location":"python/15_Machine_Learning_and_AI.html#creating-a-simple-neural-network","title":"\ud83d\udd39 Creating a Simple Neural Network","text":"<pre><code>import tensorflow as tf\nfrom tensorflow import keras\n\n# Define a simple model\nmodel = keras.Sequential([\n    keras.layers.Dense(16, activation='relu', input_shape=(4,)),\n    keras.layers.Dense(3, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=10, batch_size=8)\n</code></pre> <p>\u2705 Use Case: Training neural networks for AI applications.</p>"},{"location":"python/15_Machine_Learning_and_AI.html#154-pytorch-deep-learning-for-research-ai","title":"15.4 \ud83d\udd25 PyTorch \u2013 Deep Learning for Research &amp; AI","text":"<p>PyTorch is widely used in AI research and deep learning experiments.</p>"},{"location":"python/15_Machine_Learning_and_AI.html#installing-pytorch","title":"\u2705 Installing PyTorch","text":"<pre><code>pip install torch torchvision\n</code></pre>"},{"location":"python/15_Machine_Learning_and_AI.html#creating-a-simple-neural-network_1","title":"\ud83d\udd39 Creating a Simple Neural Network","text":"<pre><code>import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\n# Define the model\nclass SimpleNN(nn.Module):\n    def __init__(self):\n        super(SimpleNN, self).__init__()\n        self.fc1 = nn.Linear(4, 16)\n        self.fc2 = nn.Linear(16, 3)\n\n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        return torch.softmax(self.fc2(x), dim=1)\n\nmodel = SimpleNN()\n</code></pre> <p>\u2705 Use Case: Developing custom AI models for image recognition, NLP, and robotics.</p>"},{"location":"python/15_Machine_Learning_and_AI.html#155-model-evaluation-and-metrics","title":"15.5 \ud83d\udcca Model Evaluation and Metrics","text":"<p>Measuring model performance is critical in ML &amp; AI.</p> Metric Use Case Accuracy Classification problems Precision &amp; Recall Imbalanced datasets (e.g., fraud detection) Mean Squared Error (MSE) Regression models ROC Curve Evaluating classification models"},{"location":"python/15_Machine_Learning_and_AI.html#evaluating-a-model","title":"\ud83d\udd39 Evaluating a Model","text":"<pre><code>from sklearn.metrics import classification_report\n\nprint(classification_report(y_test, y_pred))\n</code></pre> <p>\u2705 Use Case: Assessing model performance before deployment.</p>"},{"location":"python/15_Machine_Learning_and_AI.html#summary","title":"\ud83d\ude80 Summary","text":"Library Purpose Best For Scikit-learn Traditional ML models Classification, regression, clustering TensorFlow Deep learning Neural networks, AI applications PyTorch AI research Custom AI models, NLP, computer vision"},{"location":"python/15_Machine_Learning_and_AI.html#final-thoughts","title":"\ud83d\udd1a Final Thoughts","text":"<p>Machine Learning and AI enable automation, predictions, and decision-making in various industries.  </p> <p>Would you like hands-on projects on ML &amp; AI? \ud83d\ude80</p>"},{"location":"python/16_Predictive_Modeling.html","title":"16 \ud83d\udd2e Predictive Modeling","text":"<p>Predictive modeling is the core of machine learning, where we use historical data to make future predictions. This chapter covers data preprocessing, feature engineering, model selection, evaluation, and deployment for predictive analytics.  </p>"},{"location":"python/16_Predictive_Modeling.html#161-understanding-predictive-modeling","title":"16.1 \ud83d\udcca Understanding Predictive Modeling","text":"<p>Predictive modeling involves training a machine learning model to make predictions based on input data. It follows these steps:</p> <p>1\ufe0f\u20e3 Data Collection \u2013 Gathering relevant data 2\ufe0f\u20e3 Data Preprocessing \u2013 Cleaning and preparing data 3\ufe0f\u20e3 Feature Engineering \u2013 Selecting important attributes 4\ufe0f\u20e3 Model Selection \u2013 Choosing the best algorithm 5\ufe0f\u20e3 Training &amp; Evaluation \u2013 Assessing model accuracy 6\ufe0f\u20e3 Prediction &amp; Deployment \u2013 Using the model for real-world applications  </p>"},{"location":"python/16_Predictive_Modeling.html#162-data-preprocessing","title":"16.2 \ud83d\udee0\ufe0f Data Preprocessing","text":"<p>Before training a model, we clean and transform data for better accuracy.</p>"},{"location":"python/16_Predictive_Modeling.html#handling-missing-values","title":"\u2705 Handling Missing Values","text":"<pre><code>import pandas as pd\n\ndf = pd.read_csv(\"data.csv\")\ndf.fillna(df.mean(), inplace=True)  # Replace missing values with mean\n</code></pre> <p>\u2705 Use Case: Cleaning noisy datasets before modeling.</p>"},{"location":"python/16_Predictive_Modeling.html#encoding-categorical-variables","title":"\ud83d\udd39 Encoding Categorical Variables","text":"<pre><code>df = pd.get_dummies(df, columns=[\"Category\"])\n</code></pre> <p>\u2705 Use Case: Converting text labels into numerical values for ML models.</p>"},{"location":"python/16_Predictive_Modeling.html#163-feature-engineering","title":"16.3 \ud83c\udfd7\ufe0f Feature Engineering","text":"<p>Feature engineering improves model accuracy by creating meaningful input variables.</p>"},{"location":"python/16_Predictive_Modeling.html#scaling-features","title":"\u2705 Scaling Features","text":"<pre><code>from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df)\n</code></pre> <p>\u2705 Use Case: Normalizing features for models like Logistic Regression &amp; SVM.</p>"},{"location":"python/16_Predictive_Modeling.html#selecting-important-features","title":"\ud83d\udd39 Selecting Important Features","text":"<pre><code>from sklearn.feature_selection import SelectKBest, f_classif\n\nX_new = SelectKBest(score_func=f_classif, k=5).fit_transform(X, y)\n</code></pre> <p>\u2705 Use Case: Choosing the most relevant features for better predictions.</p>"},{"location":"python/16_Predictive_Modeling.html#164-choosing-the-right-model","title":"16.4 \ud83e\udd16 Choosing the Right Model","text":"<p>Different algorithms are suited for different predictive tasks.</p> Model Type Algorithm Use Case Classification Logistic Regression, Random Forest Fraud detection, spam filtering Regression Linear Regression, XGBoost Stock price prediction, sales forecasting Time Series ARIMA, LSTM Weather forecasting, demand prediction"},{"location":"python/16_Predictive_Modeling.html#training-a-predictive-model","title":"\u2705 Training a Predictive Model","text":"<pre><code>from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\n</code></pre> <p>\u2705 Use Case: Training an AI model to predict future outcomes.</p>"},{"location":"python/16_Predictive_Modeling.html#165-model-evaluation-performance-metrics","title":"16.5 \ud83d\udcca Model Evaluation &amp; Performance Metrics","text":"<p>Evaluating model accuracy ensures reliable predictions.</p>"},{"location":"python/16_Predictive_Modeling.html#checking-accuracy","title":"\u2705 Checking Accuracy","text":"<pre><code>from sklearn.metrics import accuracy_score\n\ny_pred = model.predict(X_test)\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))\n</code></pre>"},{"location":"python/16_Predictive_Modeling.html#confusion-matrix","title":"\ud83d\udd39 Confusion Matrix","text":"<pre><code>from sklearn.metrics import confusion_matrix\n\nprint(confusion_matrix(y_test, y_pred))\n</code></pre> <p>\u2705 Use Case: Measuring classification model performance.</p>"},{"location":"python/16_Predictive_Modeling.html#166-making-predictions","title":"16.6 \ud83d\udd2e Making Predictions","text":"<p>After training, we use the model to predict real-world data.</p> <pre><code>new_data = [[5.1, 3.5, 1.4, 0.2]]\nprediction = model.predict(new_data)\nprint(\"Predicted Class:\", prediction)\n</code></pre> <p>\u2705 Use Case: Predicting customer behavior, stock prices, or disease diagnosis.</p>"},{"location":"python/16_Predictive_Modeling.html#167-deploying-the-model","title":"16.7 \ud83d\ude80 Deploying the Model","text":"<p>A trained model can be deployed using Flask, FastAPI, or Streamlit.</p>"},{"location":"python/16_Predictive_Modeling.html#saving-and-loading-the-model","title":"\u2705 Saving and Loading the Model","text":"<pre><code>import joblib\n\njoblib.dump(model, \"model.pkl\")  # Save model\nloaded_model = joblib.load(\"model.pkl\")  # Load model\n</code></pre> <p>\u2705 Use Case: Deploying AI models into production systems.</p>"},{"location":"python/16_Predictive_Modeling.html#summary","title":"\ud83d\ude80 Summary","text":"Step Description Data Preprocessing Cleaning and transforming data Feature Engineering Selecting the most important variables Model Selection Choosing the best ML algorithm Training &amp; Evaluation Assessing model performance Prediction &amp; Deployment Using the model for real-world applications"},{"location":"python/16_Predictive_Modeling.html#final-thoughts","title":"\ud83d\udd1a Final Thoughts","text":"<p>Predictive modeling is widely used in finance, healthcare, and business intelligence.  </p> <p>Would you like a hands-on project to build a real-world predictive model? \ud83d\ude80</p>"},{"location":"python/17_Databases.html","title":"17 \ud83c\udfdb\ufe0f Databases","text":"<p>Databases are essential for storing, managing, and retrieving structured data. Python provides built-in and third-party libraries for working with SQL and NoSQL databases.</p> <p>This chapter covers SQLite, PostgreSQL, MySQL, and MongoDB, along with how to perform CRUD operations (Create, Read, Update, Delete).</p>"},{"location":"python/17_Databases.html#171-types-of-databases","title":"17.1 \ud83d\uddc2\ufe0f Types of Databases","text":"Database Type Example Best For Relational (SQL) SQLite, MySQL, PostgreSQL Structured data with relationships NoSQL (Document-based) MongoDB, Firebase Unstructured or semi-structured data"},{"location":"python/17_Databases.html#172-working-with-sqlite-lightweight-sql-database","title":"17.2 \ud83c\udfd7\ufe0f Working with SQLite (Lightweight SQL Database)","text":"<p>SQLite is a lightweight, file-based SQL database that comes pre-installed with Python.</p>"},{"location":"python/17_Databases.html#connecting-to-sqlite","title":"\u2705 Connecting to SQLite","text":"<pre><code>import sqlite3\n\nconn = sqlite3.connect(\"database.db\")  # Creates/opens a database file\ncursor = conn.cursor()\n</code></pre>"},{"location":"python/17_Databases.html#creating-a-table","title":"\ud83d\udd39 Creating a Table","text":"<pre><code>cursor.execute('''\n    CREATE TABLE IF NOT EXISTS users (\n        id INTEGER PRIMARY KEY,\n        name TEXT,\n        age INTEGER\n    )\n''')\nconn.commit()\n</code></pre>"},{"location":"python/17_Databases.html#inserting-data","title":"\ud83d\udd39 Inserting Data","text":"<pre><code>cursor.execute(\"INSERT INTO users (name, age) VALUES (?, ?)\", (\"Alice\", 25))\nconn.commit()\n</code></pre>"},{"location":"python/17_Databases.html#reading-data","title":"\ud83d\udd39 Reading Data","text":"<pre><code>cursor.execute(\"SELECT * FROM users\")\nprint(cursor.fetchall())  # Output: [(1, 'Alice', 25)]\n</code></pre> <p>\u2705 Use Case: Small applications, local storage, prototyping.</p>"},{"location":"python/17_Databases.html#173-working-with-postgresql-mysql-sql-databases-for-large-applications","title":"17.3 \ud83c\udfe6 Working with PostgreSQL &amp; MySQL (SQL Databases for Large Applications)","text":""},{"location":"python/17_Databases.html#installing-postgresqlmysql-connector","title":"\u2705 Installing PostgreSQL/MySQL Connector","text":"<pre><code>pip install psycopg2  # PostgreSQL\npip install mysql-connector-python  # MySQL\n</code></pre>"},{"location":"python/17_Databases.html#connecting-to-postgresql","title":"\ud83d\udd39 Connecting to PostgreSQL","text":"<pre><code>import psycopg2\n\nconn = psycopg2.connect(\n    dbname=\"mydb\",\n    user=\"postgres\",\n    password=\"mypassword\",\n    host=\"localhost\"\n)\ncursor = conn.cursor()\n</code></pre>"},{"location":"python/17_Databases.html#querying-a-postgresql-table","title":"\ud83d\udd39 Querying a PostgreSQL Table","text":"<pre><code>cursor.execute(\"SELECT * FROM users\")\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n</code></pre> <p>\u2705 Use Case: Enterprise applications, web applications, analytics.</p>"},{"location":"python/17_Databases.html#174-working-with-mongodb-nosql-database","title":"17.4 \ud83c\udf43 Working with MongoDB (NoSQL Database)","text":"<p>MongoDB stores data in JSON-like documents.</p>"},{"location":"python/17_Databases.html#installing-mongodb-driver","title":"\u2705 Installing MongoDB Driver","text":"<pre><code>pip install pymongo\n</code></pre>"},{"location":"python/17_Databases.html#connecting-to-mongodb","title":"\ud83d\udd39 Connecting to MongoDB","text":"<pre><code>import pymongo\n\nclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\ndb = client[\"mydatabase\"]\ncollection = db[\"users\"]\n</code></pre>"},{"location":"python/17_Databases.html#inserting-a-document","title":"\ud83d\udd39 Inserting a Document","text":"<pre><code>user = {\"name\": \"Alice\", \"age\": 25}\ncollection.insert_one(user)\n</code></pre>"},{"location":"python/17_Databases.html#retrieving-data","title":"\ud83d\udd39 Retrieving Data","text":"<pre><code>for user in collection.find():\n    print(user)\n</code></pre> <p>\u2705 Use Case: Big data, real-time analytics, IoT applications.</p>"},{"location":"python/17_Databases.html#175-crud-operations-in-databases","title":"17.5 \ud83d\udd04 CRUD Operations in Databases","text":"Operation SQL Example MongoDB Example Create <code>INSERT INTO users VALUES (1, 'Alice', 25);</code> <code>collection.insert_one({\"name\": \"Alice\", \"age\": 25})</code> Read <code>SELECT * FROM users;</code> <code>collection.find({})</code> Update <code>UPDATE users SET age=30 WHERE name='Alice';</code> <code>collection.update_one({\"name\": \"Alice\"}, {\"$set\": {\"age\": 30}})</code> Delete <code>DELETE FROM users WHERE name='Alice';</code> <code>collection.delete_one({\"name\": \"Alice\"})</code> <p>\u2705 Use Case: Building full-stack web applications, managing structured/unstructured data.</p>"},{"location":"python/17_Databases.html#summary","title":"\ud83d\ude80 Summary","text":"Database Best For SQLite Small applications, local storage PostgreSQL/MySQL Large-scale, structured data MongoDB Flexible, unstructured data"},{"location":"python/17_Databases.html#final-thoughts","title":"\ud83d\udd1a Final Thoughts","text":"<p>Databases are essential for storing and managing data in Python applications. Would you like a real-world project on integrating databases with Python? \ud83d\ude80</p>"},{"location":"python/best_practice.html","title":"Best Practice","text":"<p>Best coding practices for Python development.</p>"},{"location":"python/pandas.html","title":"Pandas","text":"<p>A beginner-friendly guide to Pandas for data analysis.</p>"},{"location":"python/yfinance.html","title":"Yfinance","text":"<p>How to use <code>yfinance</code> to fetch and analyze stock market data.</p>"},{"location":"services/data_science.html","title":"Data Science","text":"<p>An overview of data science techniques and methodologies used in Dbnostix.</p>"},{"location":"services/database_infrastructure.html","title":"Database Infrastructure","text":"<p>Details on database infrastructure solutions and best practices.</p>"},{"location":"services/large_language_model.html","title":"Large Language Model","text":"<p>An explanation of large language models and services related to them.</p>"},{"location":"services/predictive_modeling.html","title":"Predictive Modeling","text":"<p>Insights into predictive modeling and its applications.</p>"}]}