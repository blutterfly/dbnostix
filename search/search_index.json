{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>Welcome to DBNOSTIX</p>"},{"location":"algotrade/algotrade.html","title":"Algotrade","text":"<p>A deep dive into algorithmic trading concepts.</p>"},{"location":"algotrade/extract.html","title":"Extract","text":"<p>Techniques and tools for extracting financial data.</p>"},{"location":"algotrade/load.html","title":"Load","text":"<p>Loading financial data into storage systems for further processing.</p>"},{"location":"algotrade/transform.html","title":"Transform","text":"<p>Transforming and cleaning financial data for analysis.</p>"},{"location":"database/database.html","title":"Database","text":"<p>General overview of databases and their importance.</p>"},{"location":"database/db2.html","title":"Db2","text":"<p>Introduction to IBM Db2 and its features.</p>"},{"location":"database/duckdb.html","title":"Duckdb","text":"<p>Introduction to DuckDB, an in-memory analytical database.</p>"},{"location":"database/postgresql.html","title":"Postgresql","text":"<p>A guide to PostgreSQL and its use cases.</p>"},{"location":"dbnostix/about.html","title":"About","text":"<p>Information about the Dbnostix platform, its history, and goals.</p>"},{"location":"dbnostix/company.html","title":"Dbnostix","text":"<p>An overview of Dbnostix, its purpose, and key features.</p>"},{"location":"dbnostix/contact.html","title":"Contact","text":"<p>Contact details and ways to reach out for inquiries and support.</p>"},{"location":"dbnostix/services.html","title":"Services","text":"<p>A summary of services offered by Dbnostix.</p>"},{"location":"mkdocs/admonitions.html","title":"Admonitions","text":"<p>In MkDocs Material, callouts are called Admonitions. You can implement them easily by following these steps:</p>"},{"location":"mkdocs/admonitions.html#topics","title":"Topics","text":""},{"location":"mkdocs/admonitions.html#modify-mkdocsyml","title":"Modify mkdocs.yml","text":"<p>To enable adminitions, ensure that your Material theme supports admonitions by adding these lines to your configuration file:</p> <pre><code>markdown_extensions:\n  - admonition\n  - pymdownx.details\n  - pymdownx.superfences\n</code></pre>"},{"location":"mkdocs/admonitions.html#syntax-for-callouts","title":"Syntax for Callouts","text":"<p>Here's a basic example:</p> <pre><code>!!! note \"Optional title\"\n    This is a simple note callout.\n</code></pre>"},{"location":"mkdocs/admonitions.html#types-of-admonitions","title":"Types of Admonitions","text":"<p>You can use various predefined types:</p> <p>Info</p> <ul> <li>note</li> <li>info</li> <li>tip</li> <li>warning</li> <li>danger</li> <li>success</li> <li>question</li> <li>example</li> <li>quote</li> <li>bug</li> </ul>"},{"location":"mkdocs/admonitions.html#examples","title":"Examples","text":"<pre><code>!!! info \"Important Information\"\n    Please read carefully before proceeding.\n</code></pre> <p>Important Information</p> <p>Please read carefully before proceeding.</p> <pre><code>!!! warning \"Be Careful!\"\n    You might lose your changes if you proceed without saving.\n</code></pre> <p>Be Careful!</p> <p>You might lose your changes if you proceed without saving.</p> <pre><code>??? tip \"Collapsible tip\"\n    This content is hidden until expanded by the user.\n</code></pre> Collapsible tip <p>This content is hidden until expanded by the user.</p>"},{"location":"mkdocs/collapsible_sections.html","title":"Collapsible Sections","text":"<p>How to create collapsible sections in MkDocs.</p>"},{"location":"mkdocs/mkdocs.html","title":"Overview","text":"<p>Getting started with MkDocs for documentation.</p>"},{"location":"obsidian/cards.html","title":"Cards","text":"<p>Implementing card-based layouts in MkDocs.</p>"},{"location":"obsidian/obsidian.html","title":"Obsidian","text":"<p>Overview of Obsidian as a knowledge management tool.</p>"},{"location":"python/00_Contents.html","title":"Contents","text":"<p>Welcome to this comprehensive Python guide, specifically tailored for data scientists, machine learning experts, and predictive modeling specialists. This resource aims to equip you with best practices, detailed examples, and practical use cases to streamline your data science projects and enhance your productivity. Whether you are a seasoned professional or a beginner looking to deepen your expertise, you'll find structured, actionable information to elevate your skills in Python programming, data analysis, and predictive modeling.</p> <ul> <li>01 \ud83d\udcd8 Overview</li> <li>01 \ud83d\udcd7 Introduction</li> <li>02 \ud83d\udee0\ufe0f Setup &amp; Installation</li> <li>03 \ud83d\udcdd Basic Syntax &amp; Variables</li> <li>04 \ud83d\udd04 Control Flow (Loops &amp; Conditionals)</li> <li>05 \ud83c\udf92 Data Structures (Lists, Tuples, Dicts, Sets)</li> <li>06 \ud83c\udfad Functions &amp; Modules</li> <li>07 \ud83c\udfd7\ufe0f Object-Oriented Programming (OOP)</li> <li>08 \ud83d\udc0d Advanced Python Concepts</li> <li>09 \ud83e\uddf0 Python Standard Library</li> <li>10 \ud83c\udf10 File Handling &amp; I/O</li> <li>11 \u26a1 Exception Handling &amp; Debugging</li> <li>12 \ud83d\udce1 Web Development (Flask, Django, FastAPI)</li> <li>13 \ud83d\udcca Data Science (NumPy, Pandas, Matplotlib)</li> <li>14 \ud83e\udde0 Machine Learning &amp; AI (Scikit-learn, TensorFlow, PyTorch)</li> <li>15 \ud83c\udfae Game Development (Pygame, Godot)</li> <li>16 \ud83d\udd12 Cybersecurity &amp; Ethical Hacking</li> <li>17 \ud83e\udd16 Automation &amp; Scripting</li> <li>18 \ud83d\udd78\ufe0f Web Scraping (BeautifulSoup, Scrapy)</li> <li>19 \ud83c\udfa8 GUI Development (Tkinter, PyQt)</li> <li>20 \ud83d\ude80 Performance Optimization &amp; Best Practices</li> <li>21 \ud83c\udfed Working with Databases (SQLite, PostgreSQL, MySQL)</li> <li>22 \ud83c\udfd7\ufe0f API Development &amp; RESTful Services</li> <li>23 \ud83c\udf0d Deployment &amp; Cloud (AWS, Docker, Heroku)</li> <li>24 \ud83d\udce6 Virtual Environments &amp; Package Management</li> <li>25 \ud83d\udcdd Testing &amp; Debugging (unittest, pytest)</li> <li>26 \u23f3 Concurrency &amp; Parallel Processing</li> <li>27 \u2699\ufe0f DevOps &amp; CI/CD for Python Projects</li> <li>28 \ud83d\udd04 Functional Programming in Python</li> <li>29 \ud83e\uddea Scientific Computing (SciPy, SymPy)</li> <li>30 \ud83d\udcdc Writing Pythonic Code &amp; Best Practices</li> </ul>"},{"location":"python/01_Overview.html","title":"01 \ud83d\udcd8 Overview","text":"<p>Python is a high-level, interpreted programming language known for its simplicity and readability. Created by   Guido van Rossum   and first released in 1991, Python has become one of the most popular languages due to its ease of use, vast ecosystem, and broad applicability.</p> <p>Python supports multiple programming paradigms, including   procedural, object-oriented, and functional programming  , making it a versatile choice for a variety of applications, such as   web development, data science, artificial intelligence, automation, and scientific computing  .</p>"},{"location":"python/01_Overview.html#features-of-python","title":"Features of Python","text":""},{"location":"python/01_Overview.html#1-simple-readable-syntax","title":"1. Simple &amp; Readable Syntax","text":"<ul> <li>Python\u2019s syntax is designed to be   easy to read and write  , reducing the learning curve for beginners.</li> <li>Code readability is emphasized with   indentation-based structuring   (instead of braces <code>{}</code> like in C/C++ or Java).</li> </ul>"},{"location":"python/01_Overview.html#2-interpreted-language","title":"2. Interpreted Language","text":"<ul> <li>Python is an   interpreted language  , meaning code is executed   line by line   without requiring compilation.</li> <li>This makes debugging easier but may affect execution speed compared to compiled languages.</li> </ul>"},{"location":"python/01_Overview.html#3-dynamically-typed","title":"3. Dynamically Typed","text":"<ul> <li>You   don\u2019t need to declare data types   explicitly; Python automatically detects them at runtime.</li> </ul> <pre><code>x = 10  # Integer\ny = \"Hello\"  # String\nz = 3.14  # Float\n</code></pre>"},{"location":"python/01_Overview.html#4-object-oriented-functional-programming","title":"4. Object-Oriented &amp; Functional Programming","text":"<ul> <li>Supports   object-oriented programming (OOP)  , allowing for encapsulation, inheritance, and polymorphism.</li> <li>Also supports   functional programming  , allowing the use of   map, filter, lambda functions, and higher-order functions  .</li> </ul>"},{"location":"python/01_Overview.html#5-cross-platform-compatibility","title":"5. Cross-Platform Compatibility","text":"<ul> <li>Python is   portable   and can run on   Windows, macOS, Linux, and even embedded systems   without modification.</li> </ul>"},{"location":"python/01_Overview.html#6-large-standard-library","title":"6. Large Standard Library","text":"<ul> <li>Python comes with a   rich standard library   that provides modules for file handling, networking, regular expressions, data structures, and more.</li> </ul> <pre><code>import math  # Using the built-in math module\nprint(math.sqrt(16))  # Output: 4.0\n</code></pre>"},{"location":"python/01_Overview.html#7-extensive-third-party-libraries","title":"7. Extensive Third-Party Libraries","text":"<ul> <li>Python has a vast ecosystem of libraries, such as:</li> <li>NumPy, Pandas, Matplotlib   (for Data Science)</li> <li>TensorFlow, PyTorch, Scikit-learn   (for Machine Learning &amp; AI)</li> <li>Flask, Django, FastAPI   (for Web Development)</li> <li>Requests, BeautifulSoup, Scrapy   (for Web Scraping)</li> <li>PyQt, Tkinter   (for GUI Development)</li> </ul>"},{"location":"python/01_Overview.html#8-automatic-memory-management","title":"8. Automatic Memory Management","text":"<ul> <li>Python handles memory allocation and deallocation   automatically   using   Garbage Collection (GC)  .</li> </ul>"},{"location":"python/01_Overview.html#9-multi-purpose-language","title":"9. Multi-Purpose Language","text":"<ul> <li>Used for:</li> <li>Web Development  </li> <li>Data Science &amp; Analytics  </li> <li>Machine Learning &amp; AI  </li> <li>Automation &amp; Scripting  </li> <li>Cybersecurity  </li> <li>Game Development  </li> <li>Embedded Systems (MicroPython, Raspberry Pi)  </li> </ul>"},{"location":"python/01_Overview.html#operating-systems","title":"Operating Systems","text":"<p>Python is a highly portable language that runs on a wide variety of operating systems including:</p> <ul> <li>Windows \u2013 Supports Windows 10, 11, and older versions (7, 8, Server editions).</li> <li>macOS \u2013 Available on Intel and Apple Silicon (M1, M2, M3 chips).</li> <li>Linux \u2013 Supports major distributions:</li> <li>Ubuntu</li> <li>Debian</li> <li>Fedora</li> <li>CentOS</li> <li>Red Hat Enterprise Linux (RHEL)</li> <li>Arch Linux</li> <li>openSUSE</li> <li>Manjaro, etc.</li> <li>Unix-based OS:</li> <li>FreeBSD</li> <li>OpenBSD</li> <li>NetBSD</li> <li>Solaris</li> <li>AIX (IBM Unix)</li> <li>Android \u2013 Python can run via Termux or custom builds.</li> <li>iOS/iPadOS \u2013 Python can be used via apps like Pythonista or Pyto.</li> </ul>"},{"location":"python/01_Overview.html#platforms","title":"Platforms","text":"<p>Platforms include:</p> <ul> <li>x86 (32-bit and 64-bit) \u2013 Common on Windows, Linux, and older macOS systems.</li> <li>ARM (32-bit and 64-bit) \u2013 Used in Raspberry Pi, Android devices, and Apple Silicon (via native builds).</li> <li>RISC-V \u2013 Growing support for open-source hardware.</li> <li>Web (Browser-based execution via Pyodide or Brython).</li> <li>Embedded Systems (Microcontrollers like Raspberry Pi Pico, ESP32 using MicroPython or CircuitPython).</li> <li>Mainframes (IBM z/OS supports Python for enterprise applications).</li> <li>Cloud Platforms \u2013 Runs on AWS, Azure, Google Cloud, and other cloud environments.</li> <li>Docker &amp; Containers \u2013 Python is widely used in containerized environments.</li> <li>Virtual Machines \u2013 Can run inside VMs like VirtualBox, VMware, and Hyper-V.</li> </ul> <p>Python\u2019s versatility ensures it can run on almost any modern computing environment.</p>"},{"location":"python/01_Overview.html#conclusion","title":"Conclusion","text":"<p>Python is a powerful, easy-to-learn language with a vast ecosystem, making it suitable for beginners and professionals alike. Its   simplicity, flexibility, and extensive libraries   make it a top choice for   AI, web development, data science, and automation  . \ud83d\ude80</p>"},{"location":"python/02_Setup_Installation.html","title":"02 \ud83d\udee0\ufe0f Setup and Installation","text":""},{"location":"python/02_Setup_Installation.html#environment-setup","title":"Environment Setup","text":""},{"location":"python/02_Setup_Installation.html#python-installation","title":"Python Installation","text":"<p>Setting up Python correctly is essential. We recommend downloading the latest stable Python version from the official Python website. Ensure you select the appropriate version compatible with your operating system (Windows, macOS, Linux). Follow the installer instructions, selecting the option to add Python to your PATH environment variable.</p> <p>Verify your installation by running:</p> <pre><code>python --version\n</code></pre>"},{"location":"python/02_Setup_Installation.html#virtual-environment","title":"Virtual Environment","text":"<p>Using virtual environments helps isolate your project dependencies and avoids conflicts.</p>"},{"location":"python/02_Setup_Installation.html#pip","title":"pip","text":"<p><code>pip</code> is Python's package installer, allowing easy management of packages. It comes bundled with Python 3 by default. Verify pip installation by running:</p> <pre><code>pip --version\n</code></pre>"},{"location":"python/02_Setup_Installation.html#virtual-environment-venv","title":"Virtual Environment (venv)","text":"<p>Virtual environments isolate project dependencies. Set up a virtual environment with Python's built-in <code>venv</code>:</p>"},{"location":"python/02_Setup_Installation.html#creating-and-activating-a-virtual-environment","title":"Creating and Activating a Virtual Environment","text":"<pre><code>python -m venv myenv\n\n# Activate the environment\n# On Windows:\nmyenv\\Scripts\\activate\n\n# On macOS/Linux\nsource myenv/bin/activate\n</code></pre> <p>VSCode</p> <p>In VSCode the default library when Creating Environment is .venv instead of venv</p>"},{"location":"python/02_Setup_Installation.html#installing-packages","title":"Installing Packages","text":"<p>Once activated, install packages using:</p> <pre><code>pip install numpy pandas matplotlib\n</code></pre>"},{"location":"python/02_Setup_Installation.html#integrated-development-environment","title":"Integrated Development Environment","text":"<p>Choosing the right Integrated Development Environment (IDE) is crucial for efficiency.</p>"},{"location":"python/02_Setup_Installation.html#idle","title":"IDLE","text":"<p>IDLE comes bundled with Python and is suitable for basic scripting and quick experiments.</p> <ul> <li>Launch IDLE from your Python installation.</li> <li>Provides a straightforward interactive shell and simple editor.</li> <li>Ideal for beginners or small tasks.</li> </ul>"},{"location":"python/02_Setup_Installation.html#vscode","title":"VSCode","text":"<ul> <li>Highly recommended for professional development.</li> <li>Feature-rich editor with extensive Python support through extensions.</li> <li>Easy integration with Jupyter Notebooks, Git, and debugging tools.</li> <li>Installation: VSCode.</li> </ul>"},{"location":"python/02_Setup_Installation.html#pycharm","title":"PyCharm","text":"<p>A powerful, dedicated Python IDE ideal for larger, complex projects.</p> <ul> <li>Excellent code completion, debugging, and version control integration.</li> <li>Offers Community (free) and Professional (paid) editions.</li> </ul>"},{"location":"python/02_Setup_Installation.html#jupyterlab","title":"JupyterLab","text":"<p>Web-based IDE highly popular among data scientists.</p> <ul> <li>Combines notebooks, terminal, text editors, and visualization in one interface.</li> <li>Perfect for interactive data exploration, visualization, and documentation.</li> <li>Install via pip:</li> </ul> <pre><code>pip install jupyterlab\n</code></pre> <p>Launch by running:</p> <pre><code>jupyter lab\n</code></pre> <p>This setup ensures a solid foundation to maximize productivity in your Python-based projects.</p> <p>Bug</p> <p>Add topic Python CLI</p>"},{"location":"python/03_Core_Concepts.html","title":"03 \u2699\ufe0f Core Concepts","text":""},{"location":"python/03_Core_Concepts.html#basic","title":"Basic","text":""},{"location":"python/03_Core_Concepts.html#1-variables-data-types","title":"1. Variables &amp; Data Types","text":"<p>Python supports multiple data types:</p> <pre><code>x = 10         # Integer\ny = 3.14       # Float\nz = \"Python\"   # String\na = True       # Boolean\nb = [1, 2, 3]  # List\nc = (4, 5, 6)  # Tuple\nd = {\"key\": \"value\"}  # Dictionary\n</code></pre>"},{"location":"python/03_Core_Concepts.html#2-conditional-statements","title":"2. Conditional Statements","text":"<pre><code>x = 10\nif x &gt; 5:\n    print(\"x is greater than 5\")\nelif x == 5:\n    print(\"x is 5\")\nelse:\n    print(\"x is less than 5\")\n</code></pre>"},{"location":"python/03_Core_Concepts.html#3-loops-for-while","title":"3. Loops (For &amp; While)","text":"<pre><code># For loop\nfor i in range(5):\n    print(i)\n\n# While loop\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1\n</code></pre>"},{"location":"python/03_Core_Concepts.html#4-functions","title":"4. Functions","text":"<pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"Ted\"))  # Output: Hello, Ted!\n</code></pre>"},{"location":"python/03_Core_Concepts.html#5-object-oriented-programming-oop","title":"5. Object-Oriented Programming (OOP)","text":"<pre><code>class Car:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model\n\n    def display(self):\n        return f\"Car: {self.brand} {self.model}\"\n\ncar1 = Car(\"Toyota\", \"Corolla\")\nprint(car1.display())  # Output: Car: Toyota Corolla\n</code></pre>"},{"location":"python/03_Core_Concepts.html#6-exception-handling","title":"6. Exception Handling","text":"<pre><code>try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\nfinally:\n    print(\"Execution completed.\")\n</code></pre>"},{"location":"python/03_Core_Concepts.html#7-file-handling","title":"7. File Handling","text":"<pre><code>with open(\"example.txt\", \"w\") as file:\n    file.write(\"Hello, Python!\")\n\nwith open(\"example.txt\", \"r\") as file:\n    content = file.read()\n    print(content)\n</code></pre>"},{"location":"python/03_Core_Concepts.html#8-modules-libraries","title":"8. Modules &amp; Libraries","text":"<pre><code>import math\nprint(math.factorial(5))  # Output: 120\n</code></pre> <p>Mastering these core Python concepts enables Data Scientists, Machine Learning Engineers, and AI developers to build efficient, scalable, and high-performance solutions. \ud83d\ude80</p> <p>Later,  code challenges or exercises to reinforce these topics will be covered. \ud83e\udd14</p>"},{"location":"python/04_Advanced_Concepts.html","title":"04 \u26a1 Advanced Concepts","text":"<p>Python's versatility makes it the go-to language for Data Science, Machine Learning, and AI. Mastering core concepts such as Object-Oriented Programming (OOP), Decorators, Generators, Iterators, Comprehensions, Multithreading, and Asynchronous Programming is crucial for writing efficient, scalable, and maintainable code.</p> <p>This chapter covers essential Python concepts that empower professionals in AI and data science to build optimized pipelines, parallel computations, and reusable components.</p>"},{"location":"python/04_Advanced_Concepts.html#object-oriented-programming-oop","title":"\ud83c\udfd7\ufe0f Object-Oriented Programming (OOP)","text":"<p>Object-Oriented Programming (OOP) is a programming paradigm that enables modularity, code reusability, and encapsulation. It is widely used in Machine Learning for building models, creating reusable components, and managing data pipelines.</p>"},{"location":"python/04_Advanced_Concepts.html#key-oop-concepts","title":"\ud83d\udd39 Key OOP Concepts","text":"<ul> <li>Class &amp; Object \u2013 A class is a blueprint, and an object is an instance of a class.</li> <li>Encapsulation \u2013 Restrict direct access to variables and protect data integrity.</li> <li>Inheritance \u2013 Reuse attributes and methods from a parent class.</li> <li>Polymorphism \u2013 Different classes can implement the same method.</li> </ul>"},{"location":"python/04_Advanced_Concepts.html#example-oop-in-machine-learning","title":"\ud83d\udd39 Example: OOP in Machine Learning","text":"<pre><code>class Model:\n    def __init__(self, name):\n        self.name = name\n\n    def train(self):\n        print(f\"{self.name} model is training...\")\n\nclass NeuralNetwork(Model):\n    def train(self):\n        print(f\"Training deep learning model: {self.name}\")\n\n# Usage\nmodel1 = Model(\"Linear Regression\")\nmodel2 = NeuralNetwork(\"CNN\")\n\nmodel1.train()  # Output: Linear Regression model is training...\nmodel2.train()  # Output: Training deep learning model: CNN\n</code></pre> <p>\u2705 Use Case: OOP allows structured design in ML model pipelines, hyperparameter tuning, and deployment frameworks.</p>"},{"location":"python/04_Advanced_Concepts.html#decorators-generators","title":"\ud83c\udfad Decorators &amp; Generators","text":"<p>Python decorators and generators help optimize code efficiency, making them essential in data pipelines and AI model training.</p>"},{"location":"python/04_Advanced_Concepts.html#decorators-function-wrappers","title":"\ud83d\udd39 Decorators (Function Wrappers)","text":"<p>Decorators modify the behavior of functions without changing their code.</p> <p>Example: Timing an ML Function</p> <pre><code>import time\n\ndef timer(func):\n    def wrapper(*args, kwargs):\n        start = time.time()\n        result = func(*args, kwargs)\n        end = time.time()\n        print(f\"{func.__name__} took {end - start:.4f} seconds\")\n        return result\n    return wrapper\n\n@timer\ndef train_model():\n    time.sleep(2)  # Simulating model training time\n    print(\"Model training complete!\")\n\ntrain_model()\n</code></pre> <p>\u2705 Use Case: Logging, debugging, measuring execution time, monitoring ML pipelines.</p>"},{"location":"python/04_Advanced_Concepts.html#generators-memory-efficient-iteration","title":"\ud83d\udd39 Generators (Memory-Efficient Iteration)","text":"<p>Generators are functions that return iterators lazily, saving memory when handling large datasets.</p> <p>Example: Processing Large Data Efficiently</p> <pre><code>def read_large_file(file_path):\n    with open(file_path, \"r\") as file:\n        for line in file:\n            yield line  # Yields one line at a time\n\n# Usage\nfor line in read_large_file(\"data.csv\"):\n    process(line)  # Process each line lazily\n</code></pre> <p>\u2705 Use Case: Streaming large datasets, real-time data processing in AI applications.</p>"},{"location":"python/04_Advanced_Concepts.html#iterators-comprehensions","title":"\ud83d\udd17 Iterators &amp; Comprehensions","text":"<p>Efficient data handling is critical in Machine Learning when working with large datasets and feature engineering.</p>"},{"location":"python/04_Advanced_Concepts.html#iterators","title":"\ud83d\udd39 Iterators","text":"<p>An iterator is an object that allows traversal of elements one at a time.</p> <p>Example: Custom Data Iterator</p> <pre><code>class DataLoader:\n    def __init__(self, data):\n        self.data = data\n        self.index = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.index &gt;= len(self.data):\n            raise StopIteration\n        result = self.data[self.index]\n        self.index += 1\n        return result\n\n# Usage\ndata = DataLoader([\"image1\", \"image2\", \"image3\"])\nfor d in data:\n    print(d)\n</code></pre> <p>\u2705 Use Case: Data loaders, streaming large datasets for ML models.</p>"},{"location":"python/04_Advanced_Concepts.html#list-dict-and-set-comprehensions","title":"\ud83d\udd39 List, Dict, and Set Comprehensions","text":"<p>Comprehensions make data transformation concise and are widely used in feature engineering and preprocessing.</p> <pre><code># Convert temperature from Celsius to Fahrenheit using list comprehension\ncelsius = [0, 10, 20, 30]\nfahrenheit = [((temp * 9/5) + 32) for temp in celsius]\nprint(fahrenheit)  # Output: [32.0, 50.0, 68.0, 86.0]\n</code></pre> <p>\u2705 Use Case: Feature scaling, data transformation, filtering large datasets.</p>"},{"location":"python/04_Advanced_Concepts.html#multithreading-multiprocessing","title":"\ud83d\udd04 Multithreading &amp; Multiprocessing","text":"<p>Parallel execution is essential for speeding up computations in AI and ML.</p>"},{"location":"python/04_Advanced_Concepts.html#multithreading-efficient-for-io-bound-tasks","title":"\ud83d\udd39 Multithreading (Efficient for I/O-bound tasks)","text":"<p>Example: Fetching multiple datasets in parallel</p> <pre><code>import threading\n\ndef fetch_data(source):\n    print(f\"Fetching from {source}\")\n\nsources = [\"dataset1.csv\", \"dataset2.csv\", \"dataset3.csv\"]\nthreads = [threading.Thread(target=fetch_data, args=(src,)) for src in sources]\n\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()\n</code></pre> <p>\u2705 Use Case: Downloading datasets, web scraping, handling I/O-heavy tasks.</p>"},{"location":"python/04_Advanced_Concepts.html#multiprocessing-efficient-for-cpu-bound-tasks","title":"\ud83d\udd39 Multiprocessing (Efficient for CPU-bound tasks)","text":"<p>Multiprocessing utilizes multiple CPU cores, making it ideal for heavy computations.</p> <p>Example: Parallel Model Training</p> <pre><code>from multiprocessing import Pool\n\ndef train_model(model_id):\n    return f\"Training model {model_id}\"\n\nmodels = [1, 2, 3, 4]\nwith Pool(4) as p:\n    results = p.map(train_model, models)\nprint(results)\n</code></pre> <p>\u2705 Use Case: Parallel model training, large dataset processing, hyperparameter tuning.</p>"},{"location":"python/04_Advanced_Concepts.html#async-await","title":"\ud83e\uddf5 Async &amp; Await","text":"<p>Asynchronous programming is critical for handling large-scale web-based AI applications, real-time data processing, and API calls.</p>"},{"location":"python/04_Advanced_Concepts.html#async-for-efficient-io-operations","title":"\ud83d\udd39 Async for Efficient I/O Operations","text":"<pre><code>import asyncio\n\nasync def fetch_data():\n    print(\"Fetching data...\")\n    await asyncio.sleep(2)  # Simulating delay\n    print(\"Data fetched!\")\n\nasync def main():\n    await asyncio.gather(fetch_data(), fetch_data(), fetch_data())\n\nasyncio.run(main())\n</code></pre> <p>\u2705 Use Case: Handling multiple API requests, web scraping for AI datasets, real-time ML monitoring.</p>"},{"location":"python/04_Advanced_Concepts.html#summary","title":"\ud83d\ude80 Summary","text":"Concept Use Case \ud83c\udfd7\ufe0f OOP ML model architecture, data pipeline design \ud83c\udfad Decorators Logging, debugging, function optimization \ud83c\udfad Generators Handling large datasets efficiently \ud83d\udd17 Iterators Streaming datasets, loading ML batches \ud83d\udd17 Comprehensions Feature engineering, data transformation \ud83d\udd04 Multithreading I/O-bound tasks (API calls, web scraping) \ud83d\udd04 Multiprocessing CPU-bound tasks (ML training, parallel computations) \ud83e\uddf5 Async/Await Real-time AI applications, non-blocking API calls"},{"location":"python/04_Advanced_Concepts.html#final-thoughts","title":"\ud83d\udd1a Final Thoughts","text":"<p>Mastering these core Python concepts enables Data Scientists, Machine Learning Engineers, and AI developers to build efficient, scalable, and high-performance solutions. \ud83d\ude80</p> <p>Would you like to add code challenges or exercises to reinforce these topics? \ud83e\udd14</p>"},{"location":"python/05_Syntax_and_Variables.html","title":"05 \ud83d\udcdd Syntax and Variables","text":"<p>Python's simple and readable syntax makes it a favorite among beginners and experts alike. Understanding its basic syntax and variable handling is essential for writing clean and efficient code.</p>"},{"location":"python/05_Syntax_and_Variables.html#31-python-syntax-basics","title":"\ud83d\udd39 3.1 Python Syntax Basics","text":"<p>Python follows an indentation-based syntax rather than using <code>{}</code> like C or Java. This makes the code cleaner and more readable.</p>"},{"location":"python/05_Syntax_and_Variables.html#example-python-syntax","title":"\u2705 Example: Python Syntax","text":"<pre><code># Correct indentation\nif True:\n    print(\"Hello, Python!\")  # Indented block\n</code></pre> <pre><code># \u274c Incorrect indentation (will raise an error)\nif True:\nprint(\"Hello, Python!\")  # IndentationError\n</code></pre>"},{"location":"python/05_Syntax_and_Variables.html#key-features-of-python-syntax","title":"\ud83d\udee0 Key Features of Python Syntax","text":"<ul> <li>No curly braces <code>{}</code> for blocks\u2014indentation matters!</li> <li>No need for semicolons <code>;</code> at the end of statements.</li> <li>Uses <code>#</code> for single-line comments and <code>\"\"\" \"\"\"</code> for multi-line comments.</li> </ul>"},{"location":"python/05_Syntax_and_Variables.html#32-variables-in-python","title":"\ud83d\udd39 3.2 Variables in Python","text":"<p>Variables in Python store data and do not require explicit type declaration. Python is dynamically typed, meaning the data type is determined at runtime.</p>"},{"location":"python/05_Syntax_and_Variables.html#declaring-variables","title":"\u2705 Declaring Variables","text":"<pre><code>name = \"Alice\"       # String\nage = 25            # Integer\nheight = 5.9        # Float\nis_student = True   # Boolean\n</code></pre>"},{"location":"python/05_Syntax_and_Variables.html#rules-for-variable-naming","title":"\ud83d\udd39 Rules for Variable Naming","text":"<p>\u2705 Allowed:</p> <ul> <li>Can start with a letter or underscore <code>_</code></li> <li>Can contain letters, numbers, and underscores</li> <li>Case-sensitive (<code>Age</code> and <code>age</code> are different)</li> </ul> <p>\u274c Not Allowed:</p> <ul> <li>Cannot start with a number (<code>2name \u274c</code>)</li> <li>Cannot use special characters (<code>@name \u274c</code>)</li> </ul>"},{"location":"python/05_Syntax_and_Variables.html#multiple-variable-assignment","title":"\ud83d\udd39 Multiple Variable Assignment","text":"<pre><code>a, b, c = 1, 2, \"Python\"\nprint(a, b, c)  # Output: 1 2 Python\n</code></pre> <p>\u2705 Use Case: Quick assignment of multiple values.</p>"},{"location":"python/05_Syntax_and_Variables.html#33-data-types-in-python","title":"\ud83d\udd39 3.3 Data Types in Python","text":"<p>Python provides built-in data types for handling different kinds of values.</p> Type Example Description <code>int</code> <code>x = 10</code> Whole numbers <code>float</code> <code>y = 3.14</code> Decimal numbers <code>str</code> <code>s = \"Python\"</code> Text/String <code>bool</code> <code>b = True</code> Boolean (True/False) <code>list</code> <code>l = [1,2,3]</code> Ordered, mutable collection <code>tuple</code> <code>t = (1,2,3)</code> Ordered, immutable collection <code>dict</code> <code>d = {\"key\": \"value\"}</code> Key-value pairs <code>set</code> <code>s = {1,2,3}</code> Unordered unique elements <p>\u2705 Use Case: Storing structured data, lists, and key-value mappings.</p>"},{"location":"python/05_Syntax_and_Variables.html#34-type-conversion","title":"\ud83d\udd39 3.4 Type Conversion","text":"<p>Python allows explicit type conversion (casting) when needed.</p> <pre><code>x = 5          # Integer\ny = str(x)     # Convert to string\nz = float(x)   # Convert to float\nprint(y, z)    # Output: '5' 5.0\n</code></pre> <p>\u2705 Use Case: Ensuring correct data formats in ML/DL models and databases.</p>"},{"location":"python/05_Syntax_and_Variables.html#35-string-manipulation","title":"\ud83d\udd39 3.5 String Manipulation","text":"<p>Python strings (<code>str</code>) support multiple operations.</p> <pre><code>name = \"Python\"\nprint(name.upper())   # PYTHON\nprint(name.lower())   # python\nprint(name[0:3])      # Pyt (Slicing)\n</code></pre> <p>\u2705 Use Case: Data cleaning in text processing and NLP.</p>"},{"location":"python/05_Syntax_and_Variables.html#36-user-input","title":"\ud83d\udd39 3.6 User Input","text":"<p>Python allows reading user input using <code>input()</code>.</p> <pre><code>name = input(\"Enter your name: \")\nprint(\"Hello, \" + name + \"!\")\n</code></pre> <p>\u2705 Use Case: Interactive Python applications and CLI tools.</p>"},{"location":"python/05_Syntax_and_Variables.html#37-constants-in-python","title":"\ud83d\udd39 3.7 Constants in Python","text":"<p>Python doesn\u2019t have built-in constants, but by convention, uppercase names are used.</p> <pre><code>PI = 3.1416  # Treated as a constant\n</code></pre> <p>\u2705 Use Case: Defining scientific constants.</p>"},{"location":"python/05_Syntax_and_Variables.html#38-f-strings-for-string-formatting","title":"\ud83d\udd39 3.8 f-Strings for String Formatting","text":"<pre><code>name = \"Alice\"\nage = 25\nprint(f\"My name is {name} and I am {age} years old.\")\n</code></pre> <p>\u2705 Use Case: Readable string interpolation.</p>"},{"location":"python/05_Syntax_and_Variables.html#summary","title":"\ud83d\ude80 Summary","text":"Concept Key Takeaway Python Syntax Uses indentation instead of <code>{}</code> Variables Dynamically typed, no explicit declaration needed Data Types Includes <code>int</code>, <code>float</code>, <code>str</code>, <code>bool</code>, <code>list</code>, <code>dict</code>, etc. Type Conversion Use <code>str()</code>, <code>int()</code>, <code>float()</code> for casting String Manipulation Supports <code>.upper()</code>, <code>.lower()</code>, slicing, and f-strings User Input <code>input()</code> for user interaction Constants Uppercase variable names conventionally used"},{"location":"python/05_Syntax_and_Variables.html#final-thoughts","title":"\ud83d\udd1a Final Thoughts","text":"<p>Understanding basic syntax and variables is the foundation for mastering Python. Once comfortable with these, you can move on to data structures, control flow, and advanced programming concepts.</p> <p>Would you like exercises or quizzes to reinforce learning? \ud83d\ude80</p>"},{"location":"python/06_Control_Flow.html","title":"06 \ud83d\udd04 Control Flow","text":"<p>Control flow determines the execution order of statements in a Python program. It includes conditional statements, loops, and exception handling, allowing programs to make decisions and repeat actions efficiently.</p>"},{"location":"python/06_Control_Flow.html#41-conditional-statements-if-elif-else","title":"\ud83d\udd39 4.1 Conditional Statements (if, elif, else)","text":"<p>Conditional statements allow Python to execute different blocks of code based on conditions.</p>"},{"location":"python/06_Control_Flow.html#basic-if-else-statement","title":"\u2705 Basic if-else Statement","text":"<pre><code>x = 10\n\nif x &gt; 0:\n    print(\"Positive number\")\nelif x &lt; 0:\n    print(\"Negative number\")\nelse:\n    print(\"Zero\")\n</code></pre> <p>Output: <code>Positive number</code></p>"},{"location":"python/06_Control_Flow.html#nested-if-statements","title":"\ud83d\udd39 Nested if Statements","text":"<pre><code>age = 20\n\nif age &gt; 18:\n    if age &gt;= 21:\n        print(\"Eligible for full privileges\")\n    else:\n        print(\"Limited privileges\")\nelse:\n    print(\"Not eligible\")\n</code></pre> <p>\u2705 Use Case: Decision trees in ML models, data validation, user authentication.</p>"},{"location":"python/06_Control_Flow.html#42-looping-in-python","title":"\ud83d\udd39 4.2 Looping in Python","text":"<p>Loops allow repeating actions based on conditions.</p>"},{"location":"python/06_Control_Flow.html#for-loop-iterating-over-sequences","title":"\ud83d\udd39 for Loop (Iterating over Sequences)","text":"<pre><code>numbers = [1, 2, 3, 4, 5]\n\nfor num in numbers:\n    print(num)\n</code></pre> <p>Output:</p> <pre><code>1\n2\n3\n4\n5\n</code></pre> <p>\u2705 Use Case: Iterating over lists, tuples, dictionaries, and strings in data processing, ML datasets.</p>"},{"location":"python/06_Control_Flow.html#for-loop-with-range","title":"\ud83d\udd39 for Loop with range()","text":"<pre><code>for i in range(1, 6):\n    print(i)\n</code></pre> <p>Output:  </p> <pre><code>1\n2\n3\n4\n5\n</code></pre> <p>\u2705 Use Case: Creating training epochs in machine learning models.</p>"},{"location":"python/06_Control_Flow.html#while-loop-repeat-until-condition-fails","title":"\ud83d\udd39 while Loop (Repeat Until Condition Fails)","text":"<pre><code>count = 0\n\nwhile count &lt; 5:\n    print(\"Count:\", count)\n    count += 1\n</code></pre> <p>Output:  </p> <pre><code>Count: 0\nCount: 1\nCount: 2\nCount: 3\nCount: 4\n</code></pre> <p>\u2705 Use Case: Keeping a server running, waiting for a user input, or training an ML model until convergence.</p>"},{"location":"python/06_Control_Flow.html#43-loop-control-statements","title":"\ud83d\udd39 4.3 Loop Control Statements","text":"<p>Python provides ways to modify loop behavior using <code>break</code>, <code>continue</code>, and <code>pass</code>.</p>"},{"location":"python/06_Control_Flow.html#break-exit-loop-early","title":"\ud83d\udd39 break (Exit Loop Early)","text":"<pre><code>for num in range(10):\n    if num == 5:\n        break  # Stops at 5\n    print(num)\n</code></pre> <p>Output:  </p> <pre><code>0\n1\n2\n3\n4\n</code></pre> <p>\u2705 Use Case: Stopping an AI model early if a condition is met.</p>"},{"location":"python/06_Control_Flow.html#continue-skip-iteration","title":"\ud83d\udd39 continue (Skip Iteration)","text":"<pre><code>for num in range(5):\n    if num == 2:\n        continue  # Skips 2\n    print(num)\n</code></pre> <p>Output:  </p> <pre><code>0\n1\n3\n4\n</code></pre> <p>\u2705 Use Case: Skipping invalid data points in datasets.</p>"},{"location":"python/06_Control_Flow.html#pass-do-nothing","title":"\ud83d\udd39 pass (Do Nothing)","text":"<pre><code>for i in range(5):\n    if i == 3:\n        pass  # Placeholder\n    print(i)\n</code></pre> <p>\u2705 Use Case: Placeholder for functions, classes, loops.</p>"},{"location":"python/06_Control_Flow.html#44-list-comprehensions-for-loops","title":"\ud83d\udd39 4.4 List Comprehensions for Loops","text":"<p>Python supports one-liner loops with list comprehensions, improving efficiency.</p> <pre><code>numbers = [x * 2 for x in range(5)]\nprint(numbers)\n</code></pre> <p>Output: <code>[0, 2, 4, 6, 8]</code></p> <p>\u2705 Use Case: Feature engineering, transforming datasets, list filtering.</p>"},{"location":"python/06_Control_Flow.html#45-exception-handling-try-except-finally","title":"\ud83d\udd39 4.5 Exception Handling (try-except-finally)","text":"<p>Handling exceptions prevents crashes in programs.</p> <pre><code>try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\nfinally:\n    print(\"Execution complete.\")\n</code></pre> <p>Output:  </p> <pre><code>Cannot divide by zero!\nExecution complete.\n</code></pre> <p>\u2705 Use Case: Preventing failures in data pipelines, ML model training.</p>"},{"location":"python/06_Control_Flow.html#summary","title":"\ud83d\ude80 Summary","text":"Concept Key Takeaway if-elif-else Executes different blocks based on conditions for loop Iterates over sequences (lists, tuples, etc.) while loop Runs while condition is <code>True</code> break Exits loop early continue Skips current iteration pass Placeholder statement List Comprehensions Shorter syntax for loops Exception Handling Prevents program crashes"},{"location":"python/06_Control_Flow.html#final-thoughts","title":"\ud83d\udd1a Final Thoughts","text":"<p>Control flow is crucial for decision-making and iteration in Python. Mastering it allows writing efficient, error-free code.</p> <p>Would you like exercises or real-world examples to reinforce these topics? \ud83d\ude80</p>"},{"location":"python/07_Data_Structures.html","title":"07 \ud83c\udf92 Data Structures","text":"<p>Data structures are essential for organizing, storing, and managing data efficiently in Python. Python provides built-in data structures such as Lists, Tuples, Dictionaries, and Sets, each suited for different tasks.  </p> <p>This chapter covers their properties, operations, and use cases in Data Science, Machine Learning, and AI applications.</p>"},{"location":"python/07_Data_Structures.html#071-lists-ordered-mutable-indexed","title":"07.1 \ud83d\udccb Lists (Ordered, Mutable, Indexed)","text":"<p>A list is an ordered, mutable (changeable) collection that allows duplicate values. Lists are widely used for storing and manipulating datasets.</p>"},{"location":"python/07_Data_Structures.html#creating-a-list","title":"\u2705 Creating a List","text":"<pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nnumbers = [10, 20, 30, 40]\nmixed = [1, \"Python\", 3.14, True]\n</code></pre>"},{"location":"python/07_Data_Structures.html#list-operations","title":"\ud83d\udd39 List Operations","text":"<pre><code>fruits.append(\"mango\")  # Add element\nfruits.remove(\"banana\") # Remove element\nfruits.insert(1, \"grape\")  # Insert at index\nfruits.pop()  # Remove last item\nprint(fruits)\n</code></pre> <p>\u2705 Use Case: Managing data records, feature lists, training data batches in ML.</p>"},{"location":"python/07_Data_Structures.html#list-slicing","title":"\ud83d\udd39 List Slicing","text":"<pre><code>numbers = [1, 2, 3, 4, 5, 6]\nprint(numbers[1:4])  # Output: [2, 3, 4]\n</code></pre> <p>\u2705 Use Case: Extracting subsets of data in AI and ML models.</p>"},{"location":"python/07_Data_Structures.html#072-tuples-ordered-immutable-indexed","title":"07.2 \ud83d\udccc Tuples (Ordered, Immutable, Indexed)","text":"<p>A tuple is like a list but immutable (cannot be modified). Tuples are used where data should not change.</p>"},{"location":"python/07_Data_Structures.html#creating-a-tuple","title":"\u2705 Creating a Tuple","text":"<pre><code>coordinates = (10.5, 20.3)\ncolors = (\"red\", \"green\", \"blue\")\n</code></pre>"},{"location":"python/07_Data_Structures.html#tuple-operations","title":"\ud83d\udd39 Tuple Operations","text":"<pre><code>print(coordinates[0])  # Access elements\nprint(len(colors))     # Tuple length\n</code></pre> <p>\u2705 Use Case: Storing constant data like color codes, geographic coordinates.</p>"},{"location":"python/07_Data_Structures.html#tuple-packing-unpacking","title":"\ud83d\udd39 Tuple Packing &amp; Unpacking","text":"<pre><code>point = (3, 4)\nx, y = point  # Unpacking\nprint(x, y)   # Output: 3 4\n</code></pre> <p>\u2705 Use Case: Assigning multiple values in one step in AI and data transformations.</p>"},{"location":"python/07_Data_Structures.html#073-dictionaries-key-value-pairs-unordered-mutable","title":"07.3 \ud83d\uddc2\ufe0f Dictionaries (Key-Value Pairs, Unordered, Mutable)","text":"<p>A dictionary (<code>dict</code>) stores data in key-value pairs, making it ideal for fast lookups.</p>"},{"location":"python/07_Data_Structures.html#creating-a-dictionary","title":"\u2705 Creating a Dictionary","text":"<pre><code>student = {\"name\": \"Alice\", \"age\": 21, \"grade\": \"A\"}\n</code></pre>"},{"location":"python/07_Data_Structures.html#dictionary-operations","title":"\ud83d\udd39 Dictionary Operations","text":"<pre><code>print(student[\"name\"])   # Access value\nstudent[\"age\"] = 22      # Modify value\nstudent[\"city\"] = \"NY\"   # Add new key-value pair\ndel student[\"grade\"]     # Remove key-value pair\n</code></pre> <p>\u2705 Use Case: Storing JSON-like data, AI model parameters, ML hyperparameters.</p>"},{"location":"python/07_Data_Structures.html#iterating-over-a-dictionary","title":"\ud83d\udd39 Iterating Over a Dictionary","text":"<pre><code>for key, value in student.items():\n    print(f\"{key}: {value}\")\n</code></pre> <p>\u2705 Use Case: Extracting metadata from datasets, handling API responses.</p>"},{"location":"python/07_Data_Structures.html#074-sets-unordered-unique-elements-fast-lookups","title":"07.4 \ud83d\udd25 Sets (Unordered, Unique Elements, Fast Lookups)","text":"<p>A set is an unordered collection of unique elements, useful for removing duplicates and fast lookups.</p>"},{"location":"python/07_Data_Structures.html#creating-a-set","title":"\u2705 Creating a Set","text":"<pre><code>numbers = {1, 2, 3, 4, 4, 2}  # Duplicates removed automatically\n</code></pre>"},{"location":"python/07_Data_Structures.html#set-operations","title":"\ud83d\udd39 Set Operations","text":"<pre><code>numbers.add(5)  # Add element\nnumbers.remove(3)  # Remove element\n</code></pre>"},{"location":"python/07_Data_Structures.html#set-operations-for-ai-ml","title":"\ud83d\udd39 Set Operations for AI &amp; ML","text":"<pre><code>A = {1, 2, 3, 4}\nB = {3, 4, 5, 6}\n\nprint(A.union(B))    # {1, 2, 3, 4, 5, 6}\nprint(A.intersection(B))  # {3, 4}\nprint(A.difference(B))    # {1, 2}\n</code></pre> <p>\u2705 Use Case: Removing duplicate values in datasets, comparing feature sets.</p>"},{"location":"python/07_Data_Structures.html#summary","title":"\ud83d\ude80 Summary","text":"Data Structure Properties Use Case List  \ud83d\udccb Ordered, Mutable Storing datasets, feature lists Tuple \ud83d\udccc Ordered, Immutable Constants, fixed ML configurations Dictionary \ud83d\uddc2\ufe0f Key-Value Pairs, Mutable Fast lookups, JSON data, ML parameters Set \ud83d\udd25 Unordered, Unique Elements Removing duplicates, comparing data"},{"location":"python/07_Data_Structures.html#final-thoughts","title":"\ud83d\udd1a Final Thoughts","text":"<p>Understanding Lists, Tuples, Dictionaries, and Sets is crucial for data processing, feature engineering, and AI applications.</p> <p>Would you like real-world coding exercises on these topics? \ud83d\ude80</p>"},{"location":"python/08_Functions_and_Modules.html","title":"08 \ud83c\udfad Functions and Modules","text":"<p>Functions and modules are essential building blocks in Python, promoting code reuse, modularity, and maintainability. Understanding them is crucial for data science, machine learning, and AI, where reusable code improves efficiency and readability.  </p> <p>This chapter covers defining functions, argument handling, lambda functions, recursion, and working with modules to write efficient, modular, and scalable Python code.</p>"},{"location":"python/08_Functions_and_Modules.html#081-functions-the-building-blocks-of-python","title":"08.1 \ud83c\udfaf Functions: The Building Blocks of Python","text":"<p>A function is a reusable block of code that performs a specific task.</p>"},{"location":"python/08_Functions_and_Modules.html#defining-a-function","title":"\u2705 Defining a Function","text":"<pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"Alice\"))  # Output: Hello, Alice!\n</code></pre> <p>\u2705 Use Case: Encapsulating repetitive code, making programs more readable.</p>"},{"location":"python/08_Functions_and_Modules.html#082-function-arguments-and-parameters","title":"08.2 \ud83c\udfad Function Arguments and Parameters","text":"<p>Functions in Python support different types of arguments:</p>"},{"location":"python/08_Functions_and_Modules.html#positional-arguments","title":"\ud83d\udd39 Positional Arguments","text":"<pre><code>def add(a, b):\n    return a + b\n\nprint(add(5, 3))  # Output: 8\n</code></pre>"},{"location":"python/08_Functions_and_Modules.html#default-arguments","title":"\ud83d\udd39 Default Arguments","text":"<pre><code>def power(base, exponent=2):\n    return base  exponent\n\nprint(power(3))     # Output: 9 (3\u00b2)\nprint(power(3, 3))  # Output: 27 (3\u00b3)\n</code></pre>"},{"location":"python/08_Functions_and_Modules.html#keyword-arguments","title":"\ud83d\udd39 Keyword Arguments","text":"<pre><code>print(power(exponent=3, base=2))  # Output: 8\n</code></pre>"},{"location":"python/08_Functions_and_Modules.html#variable-length-arguments-args-kwargs","title":"\ud83d\udd39 Variable-Length Arguments (*args, **kwargs)","text":"<pre><code>def sum_all(*numbers):\n    return sum(numbers)\n\nprint(sum_all(1, 2, 3, 4))  # Output: 10\n\ndef display_info(info):\n    print(info)\n\ndisplay_info(name=\"Alice\", age=25)\n</code></pre> <p>\u2705 Use Case: Handling dynamic data inputs in ML models, APIs, and automation scripts.</p>"},{"location":"python/08_Functions_and_Modules.html#083-lambda-anonymous-functions","title":"08.3 \u26a1 Lambda (Anonymous) Functions","text":"<p>Lambda functions are short, one-line functions often used in data processing.</p>"},{"location":"python/08_Functions_and_Modules.html#lambda-syntax","title":"\u2705 Lambda Syntax","text":"<pre><code>square = lambda x: x  2\nprint(square(5))  # Output: 25\n</code></pre>"},{"location":"python/08_Functions_and_Modules.html#lambda-with-map-filter-reduce","title":"\ud83d\udd39 Lambda with map(), filter(), reduce()","text":"<pre><code>numbers = [1, 2, 3, 4, 5]\nsquared = list(map(lambda x: x2, numbers))\nprint(squared)  # Output: [1, 4, 9, 16, 25]\n</code></pre> <p>\u2705 Use Case: Data transformations in pandas, NumPy, and machine learning preprocessing.</p>"},{"location":"python/08_Functions_and_Modules.html#084-recursion-functions-calling-themselves","title":"08.4 \ud83d\udd01 Recursion: Functions Calling Themselves","text":"<p>Recursion is used when a problem can be broken down into smaller subproblems.</p>"},{"location":"python/08_Functions_and_Modules.html#factorial-calculation","title":"\u2705 Factorial Calculation","text":"<pre><code>def factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n - 1)\n\nprint(factorial(5))  # Output: 120\n</code></pre> <p>\u2705 Use Case: Tree-based algorithms, graph traversal (DFS), Fibonacci sequence.</p>"},{"location":"python/08_Functions_and_Modules.html#085-python-modules-importing-and-organizing-code","title":"08.5 \ud83d\udce6 Python Modules (Importing and Organizing Code)","text":"<p>Modules allow code organization by grouping related functions and variables.</p>"},{"location":"python/08_Functions_and_Modules.html#importing-a-module","title":"\u2705 Importing a Module","text":"<pre><code>import math\nprint(math.sqrt(25))  # Output: 5.0\n</code></pre>"},{"location":"python/08_Functions_and_Modules.html#importing-specific-functions","title":"\ud83d\udd39 Importing Specific Functions","text":"<pre><code>from math import sqrt\nprint(sqrt(16))  # Output: 4.0\n</code></pre>"},{"location":"python/08_Functions_and_Modules.html#creating-a-custom-module","title":"\ud83d\udd39 Creating a Custom Module","text":"<p>\ud83d\udccc Create a file <code>mymodule.py</code> </p> <pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n</code></pre> <p>\ud83d\udccc Import and Use the Module</p> <pre><code>import mymodule\nprint(mymodule.greet(\"Alice\"))\n</code></pre> <p>\u2705 Use Case: Reusing functions in large AI projects, ML models, and APIs.</p>"},{"location":"python/08_Functions_and_Modules.html#086-working-with-built-in-and-third-party-modules","title":"08.6 \ud83d\udcc2 Working with Built-in and Third-Party Modules","text":""},{"location":"python/08_Functions_and_Modules.html#useful-built-in-modules","title":"\ud83d\udd39 Useful Built-in Modules","text":"Module Purpose <code>math</code> Mathematical functions <code>random</code> Random number generation <code>datetime</code> Date and time operations <code>os</code> File and system operations <code>sys</code> System-related functions <code>re</code> Regular expressions"},{"location":"python/08_Functions_and_Modules.html#installing-using-third-party-modules","title":"\ud83d\udd39 Installing &amp; Using Third-Party Modules","text":"<pre><code>pip install numpy pandas\n</code></pre> <pre><code>import numpy as np\nimport pandas as pd\n</code></pre> <p>\u2705 Use Case: Data science, AI model training, automation.</p>"},{"location":"python/09_Object-Oriented_Programming.html","title":"09 \ud83c\udfd7\ufe0f Object-Oriented","text":"<p>Object-Oriented Programming (OOP) is a programming paradigm that organizes code into reusable objects. It is widely used in data science, machine learning, and AI to manage models, datasets, and complex systems efficiently.</p> <p>This chapter covers classes, objects, inheritance, polymorphism, encapsulation, and abstraction to help structure Python programs for scalability and maintainability.</p>"},{"location":"python/09_Object-Oriented_Programming.html#091-what-is-oop","title":"09.1 \ud83c\udfd7\ufe0f What is OOP?","text":"<p>OOP is based on the concept of objects that contain data (attributes) and functions (methods). This approach makes programs modular, reusable, and easy to maintain.</p>"},{"location":"python/09_Object-Oriented_Programming.html#key-oop-concepts","title":"\ud83d\udd39 Key OOP Concepts","text":"Concept Description Class A blueprint for creating objects Object An instance of a class Encapsulation Hiding internal details of an object Inheritance A child class inherits attributes and methods from a parent class Polymorphism Different classes can have methods with the same name but different behaviors Abstraction Hiding unnecessary implementation details"},{"location":"python/09_Object-Oriented_Programming.html#092-creating-classes-and-objects","title":"09.2 \ud83d\udce6 Creating Classes and Objects","text":"<p>A class is a blueprint for creating objects.</p>"},{"location":"python/09_Object-Oriented_Programming.html#defining-a-class-and-creating-an-object","title":"\u2705 Defining a Class and Creating an Object","text":"<pre><code>class Car:\n    def __init__(self, brand, model):\n        self.brand = brand  # Attribute\n        self.model = model  # Attribute\n\n    def display_info(self):  # Method\n        return f\"{self.brand} {self.model}\"\n\n# Creating an object\ncar1 = Car(\"Toyota\", \"Corolla\")\nprint(car1.display_info())  # Output: Toyota Corolla\n</code></pre> <p>\u2705 Use Case: Creating machine learning models, database records, or simulation objects.</p>"},{"location":"python/09_Object-Oriented_Programming.html#093-encapsulation-data-protection","title":"09.3 \ud83d\udd10 Encapsulation (Data Protection)","text":"<p>Encapsulation restricts direct access to object attributes, ensuring data integrity.</p>"},{"location":"python/09_Object-Oriented_Programming.html#private-variables-in-a-class","title":"\u2705 Private Variables in a Class","text":"<pre><code>class BankAccount:\n    def __init__(self, balance):\n        self.__balance = balance  # Private attribute\n\n    def deposit(self, amount):\n        self.__balance += amount\n\n    def get_balance(self):\n        return self.__balance\n\n# Usage\naccount = BankAccount(1000)\naccount.deposit(500)\nprint(account.get_balance())  # Output: 1500\n</code></pre> <p>\u2705 Use Case: Protecting sensitive data like user credentials, financial data.</p>"},{"location":"python/09_Object-Oriented_Programming.html#094-inheritance-code-reusability","title":"09.4 \ud83d\udd04 Inheritance (Code Reusability)","text":"<p>Inheritance allows a child class to use the properties and methods of a parent class, reducing redundant code.</p>"},{"location":"python/09_Object-Oriented_Programming.html#single-inheritance","title":"\u2705 Single Inheritance","text":"<pre><code>class Animal:\n    def make_sound(self):\n        return \"Some sound\"\n\nclass Dog(Animal):\n    def make_sound(self):\n        return \"Bark\"\n\n# Usage\ndog = Dog()\nprint(dog.make_sound())  # Output: Bark\n</code></pre> <p>\u2705 Use Case: Extending functionality of ML models, custom layers in deep learning.</p>"},{"location":"python/09_Object-Oriented_Programming.html#multiple-inheritance","title":"\ud83d\udd39 Multiple Inheritance","text":"<pre><code>class A:\n    def method_a(self):\n        return \"Method A\"\n\nclass B:\n    def method_b(self):\n        return \"Method B\"\n\nclass C(A, B):  # Inheriting from A and B\n    pass\n\nobj = C()\nprint(obj.method_a())  # Output: Method A\nprint(obj.method_b())  # Output: Method B\n</code></pre> <p>\u2705 Use Case: Combining functionalities from different modules (e.g., ML models + preprocessing steps).</p>"},{"location":"python/09_Object-Oriented_Programming.html#095-polymorphism-multiple-forms","title":"09.5 \ud83d\udd04 Polymorphism (Multiple Forms)","text":"<p>Polymorphism allows different classes to use the same method name but behave differently.</p>"},{"location":"python/09_Object-Oriented_Programming.html#method-overriding","title":"\u2705 Method Overriding","text":"<pre><code>class Shape:\n    def area(self):\n        return \"Area method not implemented\"\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius  2  # Overriding method\n\n# Usage\ncircle = Circle(5)\nprint(circle.area())  # Output: 78.5\n</code></pre> <p>\u2705 Use Case: Implementing AI models with different training methods.</p>"},{"location":"python/09_Object-Oriented_Programming.html#096-abstraction-hiding-implementation-details","title":"09.6 \ud83c\udfad Abstraction (Hiding Implementation Details)","text":"<p>Abstraction hides complex logic and exposes only relevant details.</p>"},{"location":"python/09_Object-Oriented_Programming.html#using-the-abc-module-for-abstraction","title":"\u2705 Using the <code>ABC</code> Module for Abstraction","text":"<pre><code>from abc import ABC, abstractmethod\n\nclass Payment(ABC):  # Abstract Class\n    @abstractmethod\n    def process_payment(self, amount):\n        pass\n\nclass CreditCardPayment(Payment):\n    def process_payment(self, amount):\n        return f\"Processing credit card payment of ${amount}\"\n\n# Usage\npayment = CreditCardPayment()\nprint(payment.process_payment(100))  # Output: Processing credit card payment of $100\n</code></pre> <p>\u2705 Use Case: Defining AI model architecture, creating frameworks for ML algorithms.</p>"},{"location":"python/09_Object-Oriented_Programming.html#097-oop-in-real-world-ai-and-ml","title":"09.7 \ud83d\udee0\ufe0f OOP in Real-World AI and ML","text":""},{"location":"python/09_Object-Oriented_Programming.html#oop-for-machine-learning-models","title":"\u2705 OOP for Machine Learning Models","text":"<pre><code>class MLModel:\n    def train(self, data):\n        return \"Training the model on data\"\n\nclass NeuralNetwork(MLModel):\n    def train(self, data):\n        return \"Training deep learning model\"\n\nmodel1 = MLModel()\nmodel2 = NeuralNetwork()\n\nprint(model1.train(\"Dataset\"))  # Output: Training the model on data\nprint(model2.train(\"Dataset\"))  # Output: Training deep learning model\n</code></pre> <p>\u2705 Use Case: Modularizing ML models and creating reusable AI components.</p>"},{"location":"python/09_Object-Oriented_Programming.html#summary","title":"\ud83d\ude80 Summary","text":"OOP Concept Description Use Case Class &amp; Object Blueprint and instance of an object AI models, Data structures Encapsulation Restricting direct access to attributes Secure financial transactions Inheritance Child class inherits from parent class Model pipelines, feature engineering Polymorphism Same method, different behavior Different AI models processing inputs Abstraction Hiding unnecessary details AI frameworks, APIs"},{"location":"python/09_Object-Oriented_Programming.html#final-thoughts","title":"\ud83d\udd1a Final Thoughts","text":"<p>Object-Oriented Programming enhances modularity and reusability, making it ideal for building scalable ML models, AI systems, and large applications.</p> <p>Would you like real-world coding challenges for hands-on practice? \ud83d\ude80</p>"},{"location":"python/best_practice.html","title":"Best Practice","text":"<p>Best coding practices for Python development.</p>"},{"location":"python/pandas.html","title":"Pandas","text":"<p>A beginner-friendly guide to Pandas for data analysis.</p>"},{"location":"python/yfinance.html","title":"Yfinance","text":"<p>How to use <code>yfinance</code> to fetch and analyze stock market data.</p>"},{"location":"services/data_science.html","title":"Data Science","text":"<p>An overview of data science techniques and methodologies used in Dbnostix.</p>"},{"location":"services/database_infrastructure.html","title":"Database Infrastructure","text":"<p>Details on database infrastructure solutions and best practices.</p>"},{"location":"services/large_language_model.html","title":"Large Language Model","text":"<p>An explanation of large language models and services related to them.</p>"},{"location":"services/predictive_modeling.html","title":"Predictive Modeling","text":"<p>Insights into predictive modeling and its applications.</p>"}]}